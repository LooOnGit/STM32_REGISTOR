
FW2_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000174c  08004198  08004198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080058e4  080058e4  000028e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f4  080058f4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080058f4  080058f4  000028f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058fc  080058fc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000028fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005900  08005900  00002900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005904  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08005910  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08005910  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037a6  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f0c  00000000  00000000  000067e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  000076f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000030b  00000000  00000000  00007b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dfc  00000000  00000000  00007e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000051a3  00000000  00000000  0001cc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082dad  00000000  00000000  00021dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f70  00000000  00000000  000a4bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a5b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004198 <__do_global_dtors_aux>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4c05      	ldr	r4, [pc, #20]	@ (80041b0 <__do_global_dtors_aux+0x18>)
 800419c:	7823      	ldrb	r3, [r4, #0]
 800419e:	b933      	cbnz	r3, 80041ae <__do_global_dtors_aux+0x16>
 80041a0:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <__do_global_dtors_aux+0x1c>)
 80041a2:	b113      	cbz	r3, 80041aa <__do_global_dtors_aux+0x12>
 80041a4:	4804      	ldr	r0, [pc, #16]	@ (80041b8 <__do_global_dtors_aux+0x20>)
 80041a6:	f3af 8000 	nop.w
 80041aa:	2301      	movs	r3, #1
 80041ac:	7023      	strb	r3, [r4, #0]
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	00000000 	.word	0x00000000
 80041b8:	080058cc 	.word	0x080058cc

080041bc <frame_dummy>:
 80041bc:	b508      	push	{r3, lr}
 80041be:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <frame_dummy+0x10>)
 80041c0:	b11b      	cbz	r3, 80041ca <frame_dummy+0xe>
 80041c2:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <frame_dummy+0x14>)
 80041c4:	4803      	ldr	r0, [pc, #12]	@ (80041d4 <frame_dummy+0x18>)
 80041c6:	f3af 8000 	nop.w
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	00000000 	.word	0x00000000
 80041d0:	20000010 	.word	0x20000010
 80041d4:	080058cc 	.word	0x080058cc

080041d8 <__aeabi_uldivmod>:
 80041d8:	b953      	cbnz	r3, 80041f0 <__aeabi_uldivmod+0x18>
 80041da:	b94a      	cbnz	r2, 80041f0 <__aeabi_uldivmod+0x18>
 80041dc:	2900      	cmp	r1, #0
 80041de:	bf08      	it	eq
 80041e0:	2800      	cmpeq	r0, #0
 80041e2:	bf1c      	itt	ne
 80041e4:	f04f 31ff 	movne.w	r1, #4294967295
 80041e8:	f04f 30ff 	movne.w	r0, #4294967295
 80041ec:	f000 b96a 	b.w	80044c4 <__aeabi_idiv0>
 80041f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80041f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80041f8:	f000 f806 	bl	8004208 <__udivmoddi4>
 80041fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr

08004208 <__udivmoddi4>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	9d08      	ldr	r5, [sp, #32]
 800420e:	460c      	mov	r4, r1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d14e      	bne.n	80042b2 <__udivmoddi4+0xaa>
 8004214:	4694      	mov	ip, r2
 8004216:	458c      	cmp	ip, r1
 8004218:	4686      	mov	lr, r0
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	d962      	bls.n	80042e6 <__udivmoddi4+0xde>
 8004220:	b14a      	cbz	r2, 8004236 <__udivmoddi4+0x2e>
 8004222:	f1c2 0320 	rsb	r3, r2, #32
 8004226:	4091      	lsls	r1, r2
 8004228:	fa20 f303 	lsr.w	r3, r0, r3
 800422c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004230:	4319      	orrs	r1, r3
 8004232:	fa00 fe02 	lsl.w	lr, r0, r2
 8004236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800423a:	fa1f f68c 	uxth.w	r6, ip
 800423e:	fbb1 f4f7 	udiv	r4, r1, r7
 8004242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004246:	fb07 1114 	mls	r1, r7, r4, r1
 800424a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800424e:	fb04 f106 	mul.w	r1, r4, r6
 8004252:	4299      	cmp	r1, r3
 8004254:	d90a      	bls.n	800426c <__udivmoddi4+0x64>
 8004256:	eb1c 0303 	adds.w	r3, ip, r3
 800425a:	f104 30ff 	add.w	r0, r4, #4294967295
 800425e:	f080 8112 	bcs.w	8004486 <__udivmoddi4+0x27e>
 8004262:	4299      	cmp	r1, r3
 8004264:	f240 810f 	bls.w	8004486 <__udivmoddi4+0x27e>
 8004268:	3c02      	subs	r4, #2
 800426a:	4463      	add	r3, ip
 800426c:	1a59      	subs	r1, r3, r1
 800426e:	fa1f f38e 	uxth.w	r3, lr
 8004272:	fbb1 f0f7 	udiv	r0, r1, r7
 8004276:	fb07 1110 	mls	r1, r7, r0, r1
 800427a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800427e:	fb00 f606 	mul.w	r6, r0, r6
 8004282:	429e      	cmp	r6, r3
 8004284:	d90a      	bls.n	800429c <__udivmoddi4+0x94>
 8004286:	eb1c 0303 	adds.w	r3, ip, r3
 800428a:	f100 31ff 	add.w	r1, r0, #4294967295
 800428e:	f080 80fc 	bcs.w	800448a <__udivmoddi4+0x282>
 8004292:	429e      	cmp	r6, r3
 8004294:	f240 80f9 	bls.w	800448a <__udivmoddi4+0x282>
 8004298:	4463      	add	r3, ip
 800429a:	3802      	subs	r0, #2
 800429c:	1b9b      	subs	r3, r3, r6
 800429e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80042a2:	2100      	movs	r1, #0
 80042a4:	b11d      	cbz	r5, 80042ae <__udivmoddi4+0xa6>
 80042a6:	40d3      	lsrs	r3, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	e9c5 3200 	strd	r3, r2, [r5]
 80042ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d905      	bls.n	80042c2 <__udivmoddi4+0xba>
 80042b6:	b10d      	cbz	r5, 80042bc <__udivmoddi4+0xb4>
 80042b8:	e9c5 0100 	strd	r0, r1, [r5]
 80042bc:	2100      	movs	r1, #0
 80042be:	4608      	mov	r0, r1
 80042c0:	e7f5      	b.n	80042ae <__udivmoddi4+0xa6>
 80042c2:	fab3 f183 	clz	r1, r3
 80042c6:	2900      	cmp	r1, #0
 80042c8:	d146      	bne.n	8004358 <__udivmoddi4+0x150>
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d302      	bcc.n	80042d4 <__udivmoddi4+0xcc>
 80042ce:	4290      	cmp	r0, r2
 80042d0:	f0c0 80f0 	bcc.w	80044b4 <__udivmoddi4+0x2ac>
 80042d4:	1a86      	subs	r6, r0, r2
 80042d6:	eb64 0303 	sbc.w	r3, r4, r3
 80042da:	2001      	movs	r0, #1
 80042dc:	2d00      	cmp	r5, #0
 80042de:	d0e6      	beq.n	80042ae <__udivmoddi4+0xa6>
 80042e0:	e9c5 6300 	strd	r6, r3, [r5]
 80042e4:	e7e3      	b.n	80042ae <__udivmoddi4+0xa6>
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	f040 8090 	bne.w	800440c <__udivmoddi4+0x204>
 80042ec:	eba1 040c 	sub.w	r4, r1, ip
 80042f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80042f4:	fa1f f78c 	uxth.w	r7, ip
 80042f8:	2101      	movs	r1, #1
 80042fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80042fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004302:	fb08 4416 	mls	r4, r8, r6, r4
 8004306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800430a:	fb07 f006 	mul.w	r0, r7, r6
 800430e:	4298      	cmp	r0, r3
 8004310:	d908      	bls.n	8004324 <__udivmoddi4+0x11c>
 8004312:	eb1c 0303 	adds.w	r3, ip, r3
 8004316:	f106 34ff 	add.w	r4, r6, #4294967295
 800431a:	d202      	bcs.n	8004322 <__udivmoddi4+0x11a>
 800431c:	4298      	cmp	r0, r3
 800431e:	f200 80cd 	bhi.w	80044bc <__udivmoddi4+0x2b4>
 8004322:	4626      	mov	r6, r4
 8004324:	1a1c      	subs	r4, r3, r0
 8004326:	fa1f f38e 	uxth.w	r3, lr
 800432a:	fbb4 f0f8 	udiv	r0, r4, r8
 800432e:	fb08 4410 	mls	r4, r8, r0, r4
 8004332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004336:	fb00 f707 	mul.w	r7, r0, r7
 800433a:	429f      	cmp	r7, r3
 800433c:	d908      	bls.n	8004350 <__udivmoddi4+0x148>
 800433e:	eb1c 0303 	adds.w	r3, ip, r3
 8004342:	f100 34ff 	add.w	r4, r0, #4294967295
 8004346:	d202      	bcs.n	800434e <__udivmoddi4+0x146>
 8004348:	429f      	cmp	r7, r3
 800434a:	f200 80b0 	bhi.w	80044ae <__udivmoddi4+0x2a6>
 800434e:	4620      	mov	r0, r4
 8004350:	1bdb      	subs	r3, r3, r7
 8004352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004356:	e7a5      	b.n	80042a4 <__udivmoddi4+0x9c>
 8004358:	f1c1 0620 	rsb	r6, r1, #32
 800435c:	408b      	lsls	r3, r1
 800435e:	fa22 f706 	lsr.w	r7, r2, r6
 8004362:	431f      	orrs	r7, r3
 8004364:	fa20 fc06 	lsr.w	ip, r0, r6
 8004368:	fa04 f301 	lsl.w	r3, r4, r1
 800436c:	ea43 030c 	orr.w	r3, r3, ip
 8004370:	40f4      	lsrs	r4, r6
 8004372:	fa00 f801 	lsl.w	r8, r0, r1
 8004376:	0c38      	lsrs	r0, r7, #16
 8004378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800437c:	fbb4 fef0 	udiv	lr, r4, r0
 8004380:	fa1f fc87 	uxth.w	ip, r7
 8004384:	fb00 441e 	mls	r4, r0, lr, r4
 8004388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800438c:	fb0e f90c 	mul.w	r9, lr, ip
 8004390:	45a1      	cmp	r9, r4
 8004392:	fa02 f201 	lsl.w	r2, r2, r1
 8004396:	d90a      	bls.n	80043ae <__udivmoddi4+0x1a6>
 8004398:	193c      	adds	r4, r7, r4
 800439a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800439e:	f080 8084 	bcs.w	80044aa <__udivmoddi4+0x2a2>
 80043a2:	45a1      	cmp	r9, r4
 80043a4:	f240 8081 	bls.w	80044aa <__udivmoddi4+0x2a2>
 80043a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80043ac:	443c      	add	r4, r7
 80043ae:	eba4 0409 	sub.w	r4, r4, r9
 80043b2:	fa1f f983 	uxth.w	r9, r3
 80043b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80043ba:	fb00 4413 	mls	r4, r0, r3, r4
 80043be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80043c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80043c6:	45a4      	cmp	ip, r4
 80043c8:	d907      	bls.n	80043da <__udivmoddi4+0x1d2>
 80043ca:	193c      	adds	r4, r7, r4
 80043cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80043d0:	d267      	bcs.n	80044a2 <__udivmoddi4+0x29a>
 80043d2:	45a4      	cmp	ip, r4
 80043d4:	d965      	bls.n	80044a2 <__udivmoddi4+0x29a>
 80043d6:	3b02      	subs	r3, #2
 80043d8:	443c      	add	r4, r7
 80043da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80043de:	fba0 9302 	umull	r9, r3, r0, r2
 80043e2:	eba4 040c 	sub.w	r4, r4, ip
 80043e6:	429c      	cmp	r4, r3
 80043e8:	46ce      	mov	lr, r9
 80043ea:	469c      	mov	ip, r3
 80043ec:	d351      	bcc.n	8004492 <__udivmoddi4+0x28a>
 80043ee:	d04e      	beq.n	800448e <__udivmoddi4+0x286>
 80043f0:	b155      	cbz	r5, 8004408 <__udivmoddi4+0x200>
 80043f2:	ebb8 030e 	subs.w	r3, r8, lr
 80043f6:	eb64 040c 	sbc.w	r4, r4, ip
 80043fa:	fa04 f606 	lsl.w	r6, r4, r6
 80043fe:	40cb      	lsrs	r3, r1
 8004400:	431e      	orrs	r6, r3
 8004402:	40cc      	lsrs	r4, r1
 8004404:	e9c5 6400 	strd	r6, r4, [r5]
 8004408:	2100      	movs	r1, #0
 800440a:	e750      	b.n	80042ae <__udivmoddi4+0xa6>
 800440c:	f1c2 0320 	rsb	r3, r2, #32
 8004410:	fa20 f103 	lsr.w	r1, r0, r3
 8004414:	fa0c fc02 	lsl.w	ip, ip, r2
 8004418:	fa24 f303 	lsr.w	r3, r4, r3
 800441c:	4094      	lsls	r4, r2
 800441e:	430c      	orrs	r4, r1
 8004420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004424:	fa00 fe02 	lsl.w	lr, r0, r2
 8004428:	fa1f f78c 	uxth.w	r7, ip
 800442c:	fbb3 f0f8 	udiv	r0, r3, r8
 8004430:	fb08 3110 	mls	r1, r8, r0, r3
 8004434:	0c23      	lsrs	r3, r4, #16
 8004436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800443a:	fb00 f107 	mul.w	r1, r0, r7
 800443e:	4299      	cmp	r1, r3
 8004440:	d908      	bls.n	8004454 <__udivmoddi4+0x24c>
 8004442:	eb1c 0303 	adds.w	r3, ip, r3
 8004446:	f100 36ff 	add.w	r6, r0, #4294967295
 800444a:	d22c      	bcs.n	80044a6 <__udivmoddi4+0x29e>
 800444c:	4299      	cmp	r1, r3
 800444e:	d92a      	bls.n	80044a6 <__udivmoddi4+0x29e>
 8004450:	3802      	subs	r0, #2
 8004452:	4463      	add	r3, ip
 8004454:	1a5b      	subs	r3, r3, r1
 8004456:	b2a4      	uxth	r4, r4
 8004458:	fbb3 f1f8 	udiv	r1, r3, r8
 800445c:	fb08 3311 	mls	r3, r8, r1, r3
 8004460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004464:	fb01 f307 	mul.w	r3, r1, r7
 8004468:	42a3      	cmp	r3, r4
 800446a:	d908      	bls.n	800447e <__udivmoddi4+0x276>
 800446c:	eb1c 0404 	adds.w	r4, ip, r4
 8004470:	f101 36ff 	add.w	r6, r1, #4294967295
 8004474:	d213      	bcs.n	800449e <__udivmoddi4+0x296>
 8004476:	42a3      	cmp	r3, r4
 8004478:	d911      	bls.n	800449e <__udivmoddi4+0x296>
 800447a:	3902      	subs	r1, #2
 800447c:	4464      	add	r4, ip
 800447e:	1ae4      	subs	r4, r4, r3
 8004480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004484:	e739      	b.n	80042fa <__udivmoddi4+0xf2>
 8004486:	4604      	mov	r4, r0
 8004488:	e6f0      	b.n	800426c <__udivmoddi4+0x64>
 800448a:	4608      	mov	r0, r1
 800448c:	e706      	b.n	800429c <__udivmoddi4+0x94>
 800448e:	45c8      	cmp	r8, r9
 8004490:	d2ae      	bcs.n	80043f0 <__udivmoddi4+0x1e8>
 8004492:	ebb9 0e02 	subs.w	lr, r9, r2
 8004496:	eb63 0c07 	sbc.w	ip, r3, r7
 800449a:	3801      	subs	r0, #1
 800449c:	e7a8      	b.n	80043f0 <__udivmoddi4+0x1e8>
 800449e:	4631      	mov	r1, r6
 80044a0:	e7ed      	b.n	800447e <__udivmoddi4+0x276>
 80044a2:	4603      	mov	r3, r0
 80044a4:	e799      	b.n	80043da <__udivmoddi4+0x1d2>
 80044a6:	4630      	mov	r0, r6
 80044a8:	e7d4      	b.n	8004454 <__udivmoddi4+0x24c>
 80044aa:	46d6      	mov	lr, sl
 80044ac:	e77f      	b.n	80043ae <__udivmoddi4+0x1a6>
 80044ae:	4463      	add	r3, ip
 80044b0:	3802      	subs	r0, #2
 80044b2:	e74d      	b.n	8004350 <__udivmoddi4+0x148>
 80044b4:	4606      	mov	r6, r0
 80044b6:	4623      	mov	r3, r4
 80044b8:	4608      	mov	r0, r1
 80044ba:	e70f      	b.n	80042dc <__udivmoddi4+0xd4>
 80044bc:	3e02      	subs	r6, #2
 80044be:	4463      	add	r3, ip
 80044c0:	e730      	b.n	8004324 <__udivmoddi4+0x11c>
 80044c2:	bf00      	nop

080044c4 <__aeabi_idiv0>:
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <spi_active_slave>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void spi_active_slave()
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
	uint32_t* GPIOE_ODR = (uint32_t*)(0x40021014);
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <spi_active_slave+0x24>)
 80044d0:	607b      	str	r3, [r7, #4]
	//set LOW for PE3
	*GPIOE_ODR &= ~(1<<3);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0208 	bic.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	601a      	str	r2, [r3, #0]
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40021014 	.word	0x40021014

080044f0 <spi_inactive_slave>:

void spi_inactive_slave()
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
	uint32_t* GPIOE_ODR = (uint32_t*)(0x40021014);
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <spi_inactive_slave+0x24>)
 80044f8:	607b      	str	r3, [r7, #4]
	//set HIGH for PE3
	*GPIOE_ODR |= (1<<3);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f043 0208 	orr.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	601a      	str	r2, [r3, #0]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40021014 	.word	0x40021014

08004518 <spi_init>:
uint16_t dataX = 0;
uint16_t dataY = 0;
uint16_t dataZ = 0;

void spi_init()
{
 8004518:	b480      	push	{r7}
 800451a:	b089      	sub	sp, #36	@ 0x24
 800451c:	af00      	add	r7, sp, #0
	//set PA5(alternate funxtion - SPI1_SCK), PA6(alternate function - SPI1_MISO), PA7(alternate function - MOSI)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <spi_init+0xe8>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	4a36      	ldr	r2, [pc, #216]	@ (8004600 <spi_init+0xe8>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6313      	str	r3, [r2, #48]	@ 0x30
 800452e:	4b34      	ldr	r3, [pc, #208]	@ (8004600 <spi_init+0xe8>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
	uint32_t* GPIOA_MODER = (uint32_t*)(0x40020000);
 800453a:	4b32      	ldr	r3, [pc, #200]	@ (8004604 <spi_init+0xec>)
 800453c:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOA_AFRL = (uint32_t*)(0x40020020);
 800453e:	4b32      	ldr	r3, [pc, #200]	@ (8004608 <spi_init+0xf0>)
 8004540:	61bb      	str	r3, [r7, #24]
	*GPIOA_MODER |= (0b10 << 10) | (0b10 << 12) | (0b10) << 14;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f443 4228 	orr.w	r2, r3, #43008	@ 0xa800
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |= (5<<20)|(5<<24)|(5<<28);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8004556:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	6013      	str	r3, [r2, #0]

	//set PE3 in OUTPUT mode
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <spi_init+0xe8>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	4a26      	ldr	r2, [pc, #152]	@ (8004600 <spi_init+0xe8>)
 8004568:	f043 0310 	orr.w	r3, r3, #16
 800456c:	6313      	str	r3, [r2, #48]	@ 0x30
 800456e:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <spi_init+0xe8>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOE_MODER = (uint32_t*)(0x40021000);
 800457a:	4b24      	ldr	r3, [pc, #144]	@ (800460c <spi_init+0xf4>)
 800457c:	617b      	str	r3, [r7, #20]
	*GPIOE_MODER |= (0b01<<6);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	601a      	str	r2, [r3, #0]

	//init spi1 in master
	__HAL_RCC_SPI1_CLK_ENABLE(); //--enable 16Mhz clock spi
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <spi_init+0xe8>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004592:	4a1b      	ldr	r2, [pc, #108]	@ (8004600 <spi_init+0xe8>)
 8004594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004598:	6453      	str	r3, [r2, #68]	@ 0x44
 800459a:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <spi_init+0xe8>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
	uint32_t* CR1 = (uint32_t*)(0x40013000);
 80045a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <spi_init+0xf8>)
 80045a8:	613b      	str	r3, [r7, #16]
	*CR1 |= (0b100 << 3);// set baudrate 500Khz = (16Mhz / 32);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	601a      	str	r2, [r3, #0]
	*CR1 |= 1 << 2;		// select master mode for spi1
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f043 0204 	orr.w	r2, r3, #4
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	601a      	str	r2, [r3, #0]
	*CR1 |= (1<<8)|(1<<9); //SS pin controlled by GPIO without SPI1
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	601a      	str	r2, [r3, #0]
	*CR1 |= 1<<6;		//enable SPI1
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	601a      	str	r2, [r3, #0]
	//MODE3 CPOL, CPHA
	*CR1 |= 1<<1;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f043 0202 	orr.w	r2, r3, #2
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	601a      	str	r2, [r3, #0]
	*CR1 |= 1<<0;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3724      	adds	r7, #36	@ 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020020 	.word	0x40020020
 800460c:	40021000 	.word	0x40021000
 8004610:	40013000 	.word	0x40013000

08004614 <spi_read_data>:

char spi_read_data(char reg)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
	uint32_t* DR = (uint32_t*)(0x4001300c);
 800461e:	4b2a      	ldr	r3, [pc, #168]	@ (80046c8 <spi_read_data+0xb4>)
 8004620:	617b      	str	r3, [r7, #20]
	uint32_t* SR = (uint32_t*)(0x40013008);
 8004622:	4b2a      	ldr	r3, [pc, #168]	@ (80046cc <spi_read_data+0xb8>)
 8004624:	613b      	str	r3, [r7, #16]
	//active slave - set PE3 to LOW
	spi_active_slave();
 8004626:	f7ff ff4f 	bl	80044c8 <spi_active_slave>
	//send reg to slave - WRITE reg value to DR of SPI1
	while(((*SR >> 1) & 1)!= 1); //wait TX empty to write data DR
 800462a:	bf00      	nop
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f9      	beq.n	800462c <spi_read_data+0x18>
	*DR = reg | (1 << 7); //bit RW in sensor monitor
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	601a      	str	r2, [r3, #0]
	while(((*SR >> 1) & 1) == 1); //wait data be transfered to Tx buffer
 8004646:	bf00      	nop
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <spi_read_data+0x34>
	while(((*SR >> 0) & 1) != 1); //wait RXNE not empty (has recv data) to read data
 8004654:	bf00      	nop
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f9      	beq.n	8004656 <spi_read_data+0x42>
	while(((*SR >> 7) & 1) == 1); //wait not busy
 8004662:	bf00      	nop
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <spi_read_data+0x50>

	//clear spam data - read data from DR
	uint8_t temp = *DR;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	73fb      	strb	r3, [r7, #15]

	//send clock for slave to slave send data to master. write dummy data(0x00 or 0xFF) to DR
	while(((*SR >> 1) & 1)!= 1); //wait TX empty to write data DR
 8004676:	bf00      	nop
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f9      	beq.n	8004678 <spi_read_data+0x64>
	*DR = 0xFF; //write dummy data
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	22ff      	movs	r2, #255	@ 0xff
 8004688:	601a      	str	r2, [r3, #0]
	while(((*SR >> 1) & 1) == 1); //wait data be transfered to Tx buffer
 800468a:	bf00      	nop
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f9      	bne.n	800468c <spi_read_data+0x78>
	while(((*SR >> 0) & 1) != 1); //wait RXNE not empty (has recv data) to read data
 8004698:	bf00      	nop
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f9      	beq.n	800469a <spi_read_data+0x86>
	while(((*SR >> 7) & 1) == 1); //wait not busy
 80046a6:	bf00      	nop
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f9      	bne.n	80046a8 <spi_read_data+0x94>

	//read data from DR
	temp = *DR;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	73fb      	strb	r3, [r7, #15]

	//inactive slave - set PE3 to HIGH
	spi_inactive_slave();
 80046ba:	f7ff ff19 	bl	80044f0 <spi_inactive_slave>
	return temp;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	4001300c 	.word	0x4001300c
 80046cc:	40013008 	.word	0x40013008

080046d0 <spi_write_data>:

void spi_write_data(char reg, char data)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	460a      	mov	r2, r1
 80046da:	71fb      	strb	r3, [r7, #7]
 80046dc:	4613      	mov	r3, r2
 80046de:	71bb      	strb	r3, [r7, #6]
	uint32_t* DR = (uint32_t*)(0x4001300c);
 80046e0:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <spi_write_data+0xb0>)
 80046e2:	617b      	str	r3, [r7, #20]
	uint32_t* SR = (uint32_t*)(0x40013008);
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <spi_write_data+0xb4>)
 80046e6:	613b      	str	r3, [r7, #16]
	//active slave - set PE3 to LOW
	spi_active_slave();
 80046e8:	f7ff feee 	bl	80044c8 <spi_active_slave>
	//send reg to slave - WRITE reg value to DR of SPI1
	while(((*SR >> 1) & 1)!= 1); //wait TX empty to write data DR
 80046ec:	bf00      	nop
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f9      	beq.n	80046ee <spi_write_data+0x1e>
	*DR = reg;
 80046fa:	79fa      	ldrb	r2, [r7, #7]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	601a      	str	r2, [r3, #0]
	while(((*SR >> 1) & 1) == 1); //wait data be transfered to Tx buffer
 8004700:	bf00      	nop
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f9      	bne.n	8004702 <spi_write_data+0x32>
	while(((*SR >> 0) & 1) != 1); //wait RXNE not empty (has recv data) to read data
 800470e:	bf00      	nop
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f9      	beq.n	8004710 <spi_write_data+0x40>
	while(((*SR >> 7) & 1) == 1); //wait not busy
 800471c:	bf00      	nop
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f9      	bne.n	800471e <spi_write_data+0x4e>

	//clear spam data - read data from DR
	uint8_t temp = *DR;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	73fb      	strb	r3, [r7, #15]

	//send clock for slave to slave send data to master. write dummy data(0x00 or 0xFF) to DR
	while(((*SR >> 1) & 1)!= 1); //wait TX empty to write data DR
 8004730:	bf00      	nop
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f9      	beq.n	8004732 <spi_write_data+0x62>
	*DR = data; //write dummy data
 800473e:	79ba      	ldrb	r2, [r7, #6]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	601a      	str	r2, [r3, #0]
	while(((*SR >> 1) & 1) == 1); //wait data be transfered to Tx buffer
 8004744:	bf00      	nop
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f9      	bne.n	8004746 <spi_write_data+0x76>
	while(((*SR >> 0) & 1) != 1); //wait RXNE not empty (has recv data) to read data
 8004752:	bf00      	nop
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f9      	beq.n	8004754 <spi_write_data+0x84>
	while(((*SR >> 7) & 1) == 1); //wait not busy
 8004760:	bf00      	nop
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f9      	bne.n	8004762 <spi_write_data+0x92>

	//read data from DR
	temp = *DR;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	73fb      	strb	r3, [r7, #15]

	//inactive slave - set PE3 to HIGH
	spi_inactive_slave();
 8004774:	f7ff febc 	bl	80044f0 <spi_inactive_slave>
	return temp;
 8004778:	bf00      	nop
}
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	4001300c 	.word	0x4001300c
 8004784:	40013008 	.word	0x40013008

08004788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800478e:	f000 f957 	bl	8004a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004792:	f000 f819 	bl	80047c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004796:	f000 f875 	bl	8004884 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  spi_init();
 800479a:	f7ff febd 	bl	8004518 <spi_init>
  uint8_t gyro_id = spi_read_data(WHO_AM_I_REG);
 800479e:	200f      	movs	r0, #15
 80047a0:	f7ff ff38 	bl	8004614 <spi_read_data>
 80047a4:	4603      	mov	r3, r0
 80047a6:	71fb      	strb	r3, [r7, #7]
  gyro_id = spi_read_data(CTRL1_REG);
 80047a8:	2020      	movs	r0, #32
 80047aa:	f7ff ff33 	bl	8004614 <spi_read_data>
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
  spi_write_data(CTRL1_REG, 0b00001111);
 80047b2:	210f      	movs	r1, #15
 80047b4:	2020      	movs	r0, #32
 80047b6:	f7ff ff8b 	bl	80046d0 <spi_write_data>
  gyro_id = spi_read_data(CTRL1_REG);
 80047ba:	2020      	movs	r0, #32
 80047bc:	f7ff ff2a 	bl	8004614 <spi_read_data>
 80047c0:	4603      	mov	r3, r0
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <main+0x3c>

080047c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b094      	sub	sp, #80	@ 0x50
 80047cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ce:	f107 0320 	add.w	r3, r7, #32
 80047d2:	2230      	movs	r2, #48	@ 0x30
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 f84c 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	4b22      	ldr	r3, [pc, #136]	@ (800487c <SystemClock_Config+0xb4>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	4a21      	ldr	r2, [pc, #132]	@ (800487c <SystemClock_Config+0xb4>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80047fc:	4b1f      	ldr	r3, [pc, #124]	@ (800487c <SystemClock_Config+0xb4>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004808:	2300      	movs	r3, #0
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	4b1c      	ldr	r3, [pc, #112]	@ (8004880 <SystemClock_Config+0xb8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1b      	ldr	r2, [pc, #108]	@ (8004880 <SystemClock_Config+0xb8>)
 8004812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b19      	ldr	r3, [pc, #100]	@ (8004880 <SystemClock_Config+0xb8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004824:	2302      	movs	r3, #2
 8004826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004828:	2301      	movs	r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800482c:	2310      	movs	r3, #16
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004830:	2300      	movs	r3, #0
 8004832:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004834:	f107 0320 	add.w	r3, r7, #32
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fbf7 	bl	800502c <HAL_RCC_OscConfig>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004844:	f000 f862 	bl	800490c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004848:	230f      	movs	r3, #15
 800484a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fe5a 	bl	800551c <HAL_RCC_ClockConfig>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800486e:	f000 f84d 	bl	800490c <Error_Handler>
  }
}
 8004872:	bf00      	nop
 8004874:	3750      	adds	r7, #80	@ 0x50
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000

08004884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <MX_GPIO_Init+0x80>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <MX_GPIO_Init+0x80>)
 80048a4:	f043 0308 	orr.w	r3, r3, #8
 80048a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <MX_GPIO_Init+0x80>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <MX_GPIO_Init+0x80>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	4a11      	ldr	r2, [pc, #68]	@ (8004904 <MX_GPIO_Init+0x80>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <MX_GPIO_Init+0x80>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	607b      	str	r3, [r7, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80048d2:	2200      	movs	r2, #0
 80048d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048d8:	480b      	ldr	r0, [pc, #44]	@ (8004908 <MX_GPIO_Init+0x84>)
 80048da:	f000 fb8d 	bl	8004ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80048de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e4:	2301      	movs	r3, #1
 80048e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	4619      	mov	r1, r3
 80048f6:	4804      	ldr	r0, [pc, #16]	@ (8004908 <MX_GPIO_Init+0x84>)
 80048f8:	f000 f9fa 	bl	8004cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80048fc:	bf00      	nop
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	40020c00 	.word	0x40020c00

0800490c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004910:	b672      	cpsid	i
}
 8004912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <Error_Handler+0x8>

08004918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	4b10      	ldr	r3, [pc, #64]	@ (8004964 <HAL_MspInit+0x4c>)
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	4a0f      	ldr	r2, [pc, #60]	@ (8004964 <HAL_MspInit+0x4c>)
 8004928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800492c:	6453      	str	r3, [r2, #68]	@ 0x44
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <HAL_MspInit+0x4c>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_MspInit+0x4c>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	4a08      	ldr	r2, [pc, #32]	@ (8004964 <HAL_MspInit+0x4c>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	@ 0x40
 800494a:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <HAL_MspInit+0x4c>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800

08004968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <NMI_Handler+0x4>

08004970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <HardFault_Handler+0x4>

08004978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <MemManage_Handler+0x4>

08004980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <BusFault_Handler+0x4>

08004988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <UsageFault_Handler+0x4>

08004990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049be:	f000 f891 	bl	8004ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <SystemInit+0x20>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	4a05      	ldr	r2, [pc, #20]	@ (80049e8 <SystemInit+0x20>)
 80049d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80049ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049f0:	f7ff ffea 	bl	80049c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049f4:	480c      	ldr	r0, [pc, #48]	@ (8004a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049f6:	490d      	ldr	r1, [pc, #52]	@ (8004a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049fc:	e002      	b.n	8004a04 <LoopCopyDataInit>

080049fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a02:	3304      	adds	r3, #4

08004a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a08:	d3f9      	bcc.n	80049fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a10:	e001      	b.n	8004a16 <LoopFillZerobss>

08004a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a14:	3204      	adds	r2, #4

08004a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a18:	d3fb      	bcc.n	8004a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a1a:	f000 ff33 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a1e:	f7ff feb3 	bl	8004788 <main>
  bx  lr    
 8004a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004a30:	08005904 	.word	0x08005904
  ldr r2, =_sbss
 8004a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004a38:	2000002c 	.word	0x2000002c

08004a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a3c:	e7fe      	b.n	8004a3c <ADC_IRQHandler>
	...

08004a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a44:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <HAL_Init+0x40>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0d      	ldr	r2, [pc, #52]	@ (8004a80 <HAL_Init+0x40>)
 8004a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_Init+0x40>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	@ (8004a80 <HAL_Init+0x40>)
 8004a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a5c:	4b08      	ldr	r3, [pc, #32]	@ (8004a80 <HAL_Init+0x40>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a07      	ldr	r2, [pc, #28]	@ (8004a80 <HAL_Init+0x40>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a68:	2003      	movs	r0, #3
 8004a6a:	f000 f90d 	bl	8004c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a6e:	200f      	movs	r0, #15
 8004a70:	f000 f808 	bl	8004a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a74:	f7ff ff50 	bl	8004918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023c00 	.word	0x40023c00

08004a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <HAL_InitTick+0x54>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <HAL_InitTick+0x58>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f917 	bl	8004cd6 <HAL_SYSTICK_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e00e      	b.n	8004ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0f      	cmp	r3, #15
 8004ab6:	d80a      	bhi.n	8004ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	f000 f8ed 	bl	8004c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ac4:	4a06      	ldr	r2, [pc, #24]	@ (8004ae0 <HAL_InitTick+0x5c>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	20000008 	.word	0x20000008
 8004ae0:	20000004 	.word	0x20000004

08004ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_IncTick+0x20>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_IncTick+0x24>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4413      	add	r3, r2
 8004af4:	4a04      	ldr	r2, [pc, #16]	@ (8004b08 <HAL_IncTick+0x24>)
 8004af6:	6013      	str	r3, [r2, #0]
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000008 	.word	0x20000008
 8004b08:	20000028 	.word	0x20000028

08004b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b10:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <HAL_GetTick+0x14>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000028 	.word	0x20000028

08004b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b56:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	60d3      	str	r3, [r2, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <__NVIC_GetPriorityGrouping+0x18>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 0307 	and.w	r3, r3, #7
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db0a      	blt.n	8004bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	490c      	ldr	r1, [pc, #48]	@ (8004bd4 <__NVIC_SetPriority+0x4c>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	440b      	add	r3, r1
 8004bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb0:	e00a      	b.n	8004bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	4908      	ldr	r1, [pc, #32]	@ (8004bd8 <__NVIC_SetPriority+0x50>)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	0112      	lsls	r2, r2, #4
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	761a      	strb	r2, [r3, #24]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000e100 	.word	0xe000e100
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	@ 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	bf28      	it	cs
 8004bfa:	2304      	movcs	r3, #4
 8004bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d902      	bls.n	8004c0c <NVIC_EncodePriority+0x30>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3b03      	subs	r3, #3
 8004c0a:	e000      	b.n	8004c0e <NVIC_EncodePriority+0x32>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	401a      	ands	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c24:	f04f 31ff 	mov.w	r1, #4294967295
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	43d9      	mvns	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c34:	4313      	orrs	r3, r2
         );
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3724      	adds	r7, #36	@ 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c54:	d301      	bcc.n	8004c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00f      	b.n	8004c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c84 <SysTick_Config+0x40>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c62:	210f      	movs	r1, #15
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f7ff ff8e 	bl	8004b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <SysTick_Config+0x40>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c72:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <SysTick_Config+0x40>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	e000e010 	.word	0xe000e010

08004c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff47 	bl	8004b24 <__NVIC_SetPriorityGrouping>
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb0:	f7ff ff5c 	bl	8004b6c <__NVIC_GetPriorityGrouping>
 8004cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff ff8e 	bl	8004bdc <NVIC_EncodePriority>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff5d 	bl	8004b88 <__NVIC_SetPriority>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ffb0 	bl	8004c44 <SysTick_Config>
 8004ce4:	4603      	mov	r3, r0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	@ 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e159      	b.n	8004fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	f040 8148 	bne.w	8004fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d005      	beq.n	8004d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d130      	bne.n	8004da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d78:	2201      	movs	r2, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 0201 	and.w	r2, r3, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d017      	beq.n	8004de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d123      	bne.n	8004e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3208      	adds	r2, #8
 8004df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	220f      	movs	r2, #15
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	08da      	lsrs	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3208      	adds	r2, #8
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	2203      	movs	r2, #3
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0203 	and.w	r2, r3, #3
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a2 	beq.w	8004fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	4b57      	ldr	r3, [pc, #348]	@ (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	4a56      	ldr	r2, [pc, #344]	@ (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e86:	4b54      	ldr	r3, [pc, #336]	@ (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e92:	4a52      	ldr	r2, [pc, #328]	@ (8004fdc <HAL_GPIO_Init+0x2ec>)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	3302      	adds	r3, #2
 8004e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a49      	ldr	r2, [pc, #292]	@ (8004fe0 <HAL_GPIO_Init+0x2f0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d019      	beq.n	8004ef2 <HAL_GPIO_Init+0x202>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a48      	ldr	r2, [pc, #288]	@ (8004fe4 <HAL_GPIO_Init+0x2f4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_GPIO_Init+0x1fe>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a47      	ldr	r2, [pc, #284]	@ (8004fe8 <HAL_GPIO_Init+0x2f8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00d      	beq.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a46      	ldr	r2, [pc, #280]	@ (8004fec <HAL_GPIO_Init+0x2fc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <HAL_GPIO_Init+0x1f6>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a45      	ldr	r2, [pc, #276]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_GPIO_Init+0x1f2>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	e008      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e006      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e004      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e002      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	f002 0203 	and.w	r2, r2, #3
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	4093      	lsls	r3, r2
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f04:	4935      	ldr	r1, [pc, #212]	@ (8004fdc <HAL_GPIO_Init+0x2ec>)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f12:	4b38      	ldr	r3, [pc, #224]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f36:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f60:	4a24      	ldr	r2, [pc, #144]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f66:	4b23      	ldr	r3, [pc, #140]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f90:	4b18      	ldr	r3, [pc, #96]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	f67f aea2 	bls.w	8004d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	@ 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40020c00 	.word	0x40020c00
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40013c00 	.word	0x40013c00

08004ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
 8005004:	4613      	mov	r3, r2
 8005006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005008:	787b      	ldrb	r3, [r7, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800500e:	887a      	ldrh	r2, [r7, #2]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005014:	e003      	b.n	800501e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005016:	887b      	ldrh	r3, [r7, #2]
 8005018:	041a      	lsls	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	619a      	str	r2, [r3, #24]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e267      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d075      	beq.n	8005136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800504a:	4b88      	ldr	r3, [pc, #544]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d00c      	beq.n	8005070 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005056:	4b85      	ldr	r3, [pc, #532]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800505e:	2b08      	cmp	r3, #8
 8005060:	d112      	bne.n	8005088 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005062:	4b82      	ldr	r3, [pc, #520]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800506e:	d10b      	bne.n	8005088 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	4b7e      	ldr	r3, [pc, #504]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d05b      	beq.n	8005134 <HAL_RCC_OscConfig+0x108>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d157      	bne.n	8005134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e242      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005090:	d106      	bne.n	80050a0 <HAL_RCC_OscConfig+0x74>
 8005092:	4b76      	ldr	r3, [pc, #472]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a75      	ldr	r2, [pc, #468]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e01d      	b.n	80050dc <HAL_RCC_OscConfig+0xb0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0x98>
 80050aa:	4b70      	ldr	r3, [pc, #448]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6f      	ldr	r2, [pc, #444]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b6d      	ldr	r3, [pc, #436]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6c      	ldr	r2, [pc, #432]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e00b      	b.n	80050dc <HAL_RCC_OscConfig+0xb0>
 80050c4:	4b69      	ldr	r3, [pc, #420]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a68      	ldr	r2, [pc, #416]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b66      	ldr	r3, [pc, #408]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a65      	ldr	r2, [pc, #404]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7ff fd12 	bl	8004b0c <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7ff fd0e 	bl	8004b0c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	@ 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e207      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b5b      	ldr	r3, [pc, #364]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0xc0>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7ff fcfe 	bl	8004b0c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7ff fcfa 	bl	8004b0c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	@ 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1f3      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005126:	4b51      	ldr	r3, [pc, #324]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0xe8>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d063      	beq.n	800520a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005142:	4b4a      	ldr	r3, [pc, #296]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514e:	4b47      	ldr	r3, [pc, #284]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005156:	2b08      	cmp	r3, #8
 8005158:	d11c      	bne.n	8005194 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515a:	4b44      	ldr	r3, [pc, #272]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	4b41      	ldr	r3, [pc, #260]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x152>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e1c7      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b3b      	ldr	r3, [pc, #236]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4937      	ldr	r1, [pc, #220]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005192:	e03a      	b.n	800520a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519c:	4b34      	ldr	r3, [pc, #208]	@ (8005270 <HAL_RCC_OscConfig+0x244>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7ff fcb3 	bl	8004b0c <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051aa:	f7ff fcaf 	bl	8004b0c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1a8      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051bc:	4b2b      	ldr	r3, [pc, #172]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b28      	ldr	r3, [pc, #160]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4925      	ldr	r1, [pc, #148]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
 80051dc:	e015      	b.n	800520a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051de:	4b24      	ldr	r3, [pc, #144]	@ (8005270 <HAL_RCC_OscConfig+0x244>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7ff fc92 	bl	8004b0c <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ec:	f7ff fc8e 	bl	8004b0c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e187      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fe:	4b1b      	ldr	r3, [pc, #108]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d036      	beq.n	8005284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <HAL_RCC_OscConfig+0x248>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7ff fc72 	bl	8004b0c <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522c:	f7ff fc6e 	bl	8004b0c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e167      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523e:	4b0b      	ldr	r3, [pc, #44]	@ (800526c <HAL_RCC_OscConfig+0x240>)
 8005240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x200>
 800524a:	e01b      	b.n	8005284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800524c:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <HAL_RCC_OscConfig+0x248>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005252:	f7ff fc5b 	bl	8004b0c <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005258:	e00e      	b.n	8005278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525a:	f7ff fc57 	bl	8004b0c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d907      	bls.n	8005278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e150      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
 800526c:	40023800 	.word	0x40023800
 8005270:	42470000 	.word	0x42470000
 8005274:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005278:	4b88      	ldr	r3, [pc, #544]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800527a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ea      	bne.n	800525a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8097 	beq.w	80053c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005296:	4b81      	ldr	r3, [pc, #516]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	4b7d      	ldr	r3, [pc, #500]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	4a7c      	ldr	r2, [pc, #496]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052b2:	4b7a      	ldr	r3, [pc, #488]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c2:	4b77      	ldr	r3, [pc, #476]	@ (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d118      	bne.n	8005300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ce:	4b74      	ldr	r3, [pc, #464]	@ (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a73      	ldr	r2, [pc, #460]	@ (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052da:	f7ff fc17 	bl	8004b0c <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e2:	f7ff fc13 	bl	8004b0c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e10c      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f4:	4b6a      	ldr	r3, [pc, #424]	@ (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d106      	bne.n	8005316 <HAL_RCC_OscConfig+0x2ea>
 8005308:	4b64      	ldr	r3, [pc, #400]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	4a63      	ldr	r2, [pc, #396]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	6713      	str	r3, [r2, #112]	@ 0x70
 8005314:	e01c      	b.n	8005350 <HAL_RCC_OscConfig+0x324>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b05      	cmp	r3, #5
 800531c:	d10c      	bne.n	8005338 <HAL_RCC_OscConfig+0x30c>
 800531e:	4b5f      	ldr	r3, [pc, #380]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005322:	4a5e      	ldr	r2, [pc, #376]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005324:	f043 0304 	orr.w	r3, r3, #4
 8005328:	6713      	str	r3, [r2, #112]	@ 0x70
 800532a:	4b5c      	ldr	r3, [pc, #368]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	4a5b      	ldr	r2, [pc, #364]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	6713      	str	r3, [r2, #112]	@ 0x70
 8005336:	e00b      	b.n	8005350 <HAL_RCC_OscConfig+0x324>
 8005338:	4b58      	ldr	r3, [pc, #352]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533c:	4a57      	ldr	r2, [pc, #348]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	6713      	str	r3, [r2, #112]	@ 0x70
 8005344:	4b55      	ldr	r3, [pc, #340]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005348:	4a54      	ldr	r2, [pc, #336]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 800534a:	f023 0304 	bic.w	r3, r3, #4
 800534e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7ff fbd8 	bl	8004b0c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535e:	e00a      	b.n	8005376 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7ff fbd4 	bl	8004b0c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0cb      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005376:	4b49      	ldr	r3, [pc, #292]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ee      	beq.n	8005360 <HAL_RCC_OscConfig+0x334>
 8005382:	e014      	b.n	80053ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005384:	f7ff fbc2 	bl	8004b0c <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538c:	f7ff fbbe 	bl	8004b0c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0b5      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a2:	4b3e      	ldr	r3, [pc, #248]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ee      	bne.n	800538c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b39      	ldr	r3, [pc, #228]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	4a38      	ldr	r2, [pc, #224]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80053ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a1 	beq.w	800550c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ca:	4b34      	ldr	r3, [pc, #208]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d05c      	beq.n	8005490 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d141      	bne.n	8005462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053de:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <HAL_RCC_OscConfig+0x478>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7ff fb92 	bl	8004b0c <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7ff fb8e 	bl	8004b0c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e087      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	4b27      	ldr	r3, [pc, #156]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	3b01      	subs	r3, #1
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	491b      	ldr	r1, [pc, #108]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005434:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <HAL_RCC_OscConfig+0x478>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543a:	f7ff fb67 	bl	8004b0c <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005442:	f7ff fb63 	bl	8004b0c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e05c      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005454:	4b11      	ldr	r3, [pc, #68]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x416>
 8005460:	e054      	b.n	800550c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <HAL_RCC_OscConfig+0x478>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7ff fb50 	bl	8004b0c <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005470:	f7ff fb4c 	bl	8004b0c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e045      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	4b06      	ldr	r3, [pc, #24]	@ (800549c <HAL_RCC_OscConfig+0x470>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x444>
 800548e:	e03d      	b.n	800550c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e038      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
 800549c:	40023800 	.word	0x40023800
 80054a0:	40007000 	.word	0x40007000
 80054a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <HAL_RCC_OscConfig+0x4ec>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d028      	beq.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d121      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d11a      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d111      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800

0800551c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0cc      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005530:	4b68      	ldr	r3, [pc, #416]	@ (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d90c      	bls.n	8005558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b65      	ldr	r3, [pc, #404]	@ (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b63      	ldr	r3, [pc, #396]	@ (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0b8      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d020      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005570:	4b59      	ldr	r3, [pc, #356]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a58      	ldr	r2, [pc, #352]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800557a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005588:	4b53      	ldr	r3, [pc, #332]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a52      	ldr	r2, [pc, #328]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005594:	4b50      	ldr	r3, [pc, #320]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	494d      	ldr	r1, [pc, #308]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d044      	beq.n	800563c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	4b47      	ldr	r3, [pc, #284]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d119      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e07f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d003      	beq.n	80055da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055da:	4b3f      	ldr	r3, [pc, #252]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e06f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ea:	4b3b      	ldr	r3, [pc, #236]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e067      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fa:	4b37      	ldr	r3, [pc, #220]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 0203 	bic.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4934      	ldr	r1, [pc, #208]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800560c:	f7ff fa7e 	bl	8004b0c <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	e00a      	b.n	800562a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005614:	f7ff fa7a 	bl	8004b0c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e04f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	4b2b      	ldr	r3, [pc, #172]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 020c 	and.w	r2, r3, #12
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d1eb      	bne.n	8005614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d20c      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b22      	ldr	r3, [pc, #136]	@ (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b20      	ldr	r3, [pc, #128]	@ (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e032      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005670:	4b19      	ldr	r3, [pc, #100]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4916      	ldr	r1, [pc, #88]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568e:	4b12      	ldr	r3, [pc, #72]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	490e      	ldr	r1, [pc, #56]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056a2:	f000 f821 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	490a      	ldr	r1, [pc, #40]	@ (80056dc <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	5ccb      	ldrb	r3, [r1, r3]
 80056b6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ba:	4a09      	ldr	r2, [pc, #36]	@ (80056e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056be:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <HAL_RCC_ClockConfig+0x1c8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff f9de 	bl	8004a84 <HAL_InitTick>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023c00 	.word	0x40023c00
 80056d8:	40023800 	.word	0x40023800
 80056dc:	080058e4 	.word	0x080058e4
 80056e0:	20000000 	.word	0x20000000
 80056e4:	20000004 	.word	0x20000004

080056e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ec:	b090      	sub	sp, #64	@ 0x40
 80056ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005700:	4b59      	ldr	r3, [pc, #356]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 030c 	and.w	r3, r3, #12
 8005708:	2b08      	cmp	r3, #8
 800570a:	d00d      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x40>
 800570c:	2b08      	cmp	r3, #8
 800570e:	f200 80a1 	bhi.w	8005854 <HAL_RCC_GetSysClockFreq+0x16c>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x34>
 8005716:	2b04      	cmp	r3, #4
 8005718:	d003      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0x3a>
 800571a:	e09b      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800571c:	4b53      	ldr	r3, [pc, #332]	@ (800586c <HAL_RCC_GetSysClockFreq+0x184>)
 800571e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005720:	e09b      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005722:	4b53      	ldr	r3, [pc, #332]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x188>)
 8005724:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005726:	e098      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005728:	4b4f      	ldr	r3, [pc, #316]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005732:	4b4d      	ldr	r3, [pc, #308]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d028      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800573e:	4b4a      	ldr	r3, [pc, #296]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	099b      	lsrs	r3, r3, #6
 8005744:	2200      	movs	r2, #0
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	627a      	str	r2, [r7, #36]	@ 0x24
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005750:	2100      	movs	r1, #0
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x188>)
 8005754:	fb03 f201 	mul.w	r2, r3, r1
 8005758:	2300      	movs	r3, #0
 800575a:	fb00 f303 	mul.w	r3, r0, r3
 800575e:	4413      	add	r3, r2
 8005760:	4a43      	ldr	r2, [pc, #268]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x188>)
 8005762:	fba0 1202 	umull	r1, r2, r0, r2
 8005766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005768:	460a      	mov	r2, r1
 800576a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800576c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800576e:	4413      	add	r3, r2
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005774:	2200      	movs	r2, #0
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	61fa      	str	r2, [r7, #28]
 800577a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800577e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005782:	f7fe fd29 	bl	80041d8 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4613      	mov	r3, r2
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578e:	e053      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005790:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	2200      	movs	r2, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	617a      	str	r2, [r7, #20]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057a2:	f04f 0b00 	mov.w	fp, #0
 80057a6:	4652      	mov	r2, sl
 80057a8:	465b      	mov	r3, fp
 80057aa:	f04f 0000 	mov.w	r0, #0
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	0159      	lsls	r1, r3, #5
 80057b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b8:	0150      	lsls	r0, r2, #5
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	ebb2 080a 	subs.w	r8, r2, sl
 80057c2:	eb63 090b 	sbc.w	r9, r3, fp
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057da:	ebb2 0408 	subs.w	r4, r2, r8
 80057de:	eb63 0509 	sbc.w	r5, r3, r9
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	00eb      	lsls	r3, r5, #3
 80057ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057f0:	00e2      	lsls	r2, r4, #3
 80057f2:	4614      	mov	r4, r2
 80057f4:	461d      	mov	r5, r3
 80057f6:	eb14 030a 	adds.w	r3, r4, sl
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	eb45 030b 	adc.w	r3, r5, fp
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800580e:	4629      	mov	r1, r5
 8005810:	028b      	lsls	r3, r1, #10
 8005812:	4621      	mov	r1, r4
 8005814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005818:	4621      	mov	r1, r4
 800581a:	028a      	lsls	r2, r1, #10
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	2200      	movs	r2, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800582c:	f7fe fcd4 	bl	80041d8 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4613      	mov	r3, r2
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005838:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	3301      	adds	r3, #1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005848:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005852:	e002      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <HAL_RCC_GetSysClockFreq+0x184>)
 8005856:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800585c:	4618      	mov	r0, r3
 800585e:	3740      	adds	r7, #64	@ 0x40
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800
 800586c:	00f42400 	.word	0x00f42400
 8005870:	017d7840 	.word	0x017d7840

08005874 <memset>:
 8005874:	4402      	add	r2, r0
 8005876:	4603      	mov	r3, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4d0d      	ldr	r5, [pc, #52]	@ (80058bc <__libc_init_array+0x38>)
 8005888:	4c0d      	ldr	r4, [pc, #52]	@ (80058c0 <__libc_init_array+0x3c>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	2600      	movs	r6, #0
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	4d0b      	ldr	r5, [pc, #44]	@ (80058c4 <__libc_init_array+0x40>)
 8005896:	4c0c      	ldr	r4, [pc, #48]	@ (80058c8 <__libc_init_array+0x44>)
 8005898:	f000 f818 	bl	80058cc <_init>
 800589c:	1b64      	subs	r4, r4, r5
 800589e:	10a4      	asrs	r4, r4, #2
 80058a0:	2600      	movs	r6, #0
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	080058fc 	.word	0x080058fc
 80058c0:	080058fc 	.word	0x080058fc
 80058c4:	080058fc 	.word	0x080058fc
 80058c8:	08005900 	.word	0x08005900

080058cc <_init>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr

080058d8 <_fini>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	bf00      	nop
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr
