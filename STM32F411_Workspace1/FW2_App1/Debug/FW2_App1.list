
FW2_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002600  080041a0  080041a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080067a0  080067a0  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00003948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00003950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006954  08006954  00003954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006958  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004170  2000005c  080069b4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041cc  080069b4  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a93  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000104a  00000000  00000000  00007b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00008b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000332  00000000  00000000  00008fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f7f  00000000  00000000  00009312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005791  00000000  00000000  0001e291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c5a  00000000  00000000  00023a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a667c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001734  00000000  00000000  000a66c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a7df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041a0 <__do_global_dtors_aux>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4c05      	ldr	r4, [pc, #20]	@ (80041b8 <__do_global_dtors_aux+0x18>)
 80041a4:	7823      	ldrb	r3, [r4, #0]
 80041a6:	b933      	cbnz	r3, 80041b6 <__do_global_dtors_aux+0x16>
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <__do_global_dtors_aux+0x1c>)
 80041aa:	b113      	cbz	r3, 80041b2 <__do_global_dtors_aux+0x12>
 80041ac:	4804      	ldr	r0, [pc, #16]	@ (80041c0 <__do_global_dtors_aux+0x20>)
 80041ae:	f3af 8000 	nop.w
 80041b2:	2301      	movs	r3, #1
 80041b4:	7023      	strb	r3, [r4, #0]
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	2000005c 	.word	0x2000005c
 80041bc:	00000000 	.word	0x00000000
 80041c0:	08006788 	.word	0x08006788

080041c4 <frame_dummy>:
 80041c4:	b508      	push	{r3, lr}
 80041c6:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <frame_dummy+0x10>)
 80041c8:	b11b      	cbz	r3, 80041d2 <frame_dummy+0xe>
 80041ca:	4903      	ldr	r1, [pc, #12]	@ (80041d8 <frame_dummy+0x14>)
 80041cc:	4803      	ldr	r0, [pc, #12]	@ (80041dc <frame_dummy+0x18>)
 80041ce:	f3af 8000 	nop.w
 80041d2:	bd08      	pop	{r3, pc}
 80041d4:	00000000 	.word	0x00000000
 80041d8:	20000060 	.word	0x20000060
 80041dc:	08006788 	.word	0x08006788

080041e0 <strlen>:
 80041e0:	4603      	mov	r3, r0
 80041e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d1fb      	bne.n	80041e2 <strlen+0x2>
 80041ea:	1a18      	subs	r0, r3, r0
 80041ec:	3801      	subs	r0, #1
 80041ee:	4770      	bx	lr

080041f0 <memchr>:
 80041f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80041f4:	2a10      	cmp	r2, #16
 80041f6:	db2b      	blt.n	8004250 <memchr+0x60>
 80041f8:	f010 0f07 	tst.w	r0, #7
 80041fc:	d008      	beq.n	8004210 <memchr+0x20>
 80041fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004202:	3a01      	subs	r2, #1
 8004204:	428b      	cmp	r3, r1
 8004206:	d02d      	beq.n	8004264 <memchr+0x74>
 8004208:	f010 0f07 	tst.w	r0, #7
 800420c:	b342      	cbz	r2, 8004260 <memchr+0x70>
 800420e:	d1f6      	bne.n	80041fe <memchr+0xe>
 8004210:	b4f0      	push	{r4, r5, r6, r7}
 8004212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800421a:	f022 0407 	bic.w	r4, r2, #7
 800421e:	f07f 0700 	mvns.w	r7, #0
 8004222:	2300      	movs	r3, #0
 8004224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004228:	3c08      	subs	r4, #8
 800422a:	ea85 0501 	eor.w	r5, r5, r1
 800422e:	ea86 0601 	eor.w	r6, r6, r1
 8004232:	fa85 f547 	uadd8	r5, r5, r7
 8004236:	faa3 f587 	sel	r5, r3, r7
 800423a:	fa86 f647 	uadd8	r6, r6, r7
 800423e:	faa5 f687 	sel	r6, r5, r7
 8004242:	b98e      	cbnz	r6, 8004268 <memchr+0x78>
 8004244:	d1ee      	bne.n	8004224 <memchr+0x34>
 8004246:	bcf0      	pop	{r4, r5, r6, r7}
 8004248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800424c:	f002 0207 	and.w	r2, r2, #7
 8004250:	b132      	cbz	r2, 8004260 <memchr+0x70>
 8004252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004256:	3a01      	subs	r2, #1
 8004258:	ea83 0301 	eor.w	r3, r3, r1
 800425c:	b113      	cbz	r3, 8004264 <memchr+0x74>
 800425e:	d1f8      	bne.n	8004252 <memchr+0x62>
 8004260:	2000      	movs	r0, #0
 8004262:	4770      	bx	lr
 8004264:	3801      	subs	r0, #1
 8004266:	4770      	bx	lr
 8004268:	2d00      	cmp	r5, #0
 800426a:	bf06      	itte	eq
 800426c:	4635      	moveq	r5, r6
 800426e:	3803      	subeq	r0, #3
 8004270:	3807      	subne	r0, #7
 8004272:	f015 0f01 	tst.w	r5, #1
 8004276:	d107      	bne.n	8004288 <memchr+0x98>
 8004278:	3001      	adds	r0, #1
 800427a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800427e:	bf02      	ittt	eq
 8004280:	3001      	addeq	r0, #1
 8004282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8004286:	3001      	addeq	r0, #1
 8004288:	bcf0      	pop	{r4, r5, r6, r7}
 800428a:	3801      	subs	r0, #1
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop

08004290 <__aeabi_uldivmod>:
 8004290:	b953      	cbnz	r3, 80042a8 <__aeabi_uldivmod+0x18>
 8004292:	b94a      	cbnz	r2, 80042a8 <__aeabi_uldivmod+0x18>
 8004294:	2900      	cmp	r1, #0
 8004296:	bf08      	it	eq
 8004298:	2800      	cmpeq	r0, #0
 800429a:	bf1c      	itt	ne
 800429c:	f04f 31ff 	movne.w	r1, #4294967295
 80042a0:	f04f 30ff 	movne.w	r0, #4294967295
 80042a4:	f000 b96a 	b.w	800457c <__aeabi_idiv0>
 80042a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80042ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80042b0:	f000 f806 	bl	80042c0 <__udivmoddi4>
 80042b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80042b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042bc:	b004      	add	sp, #16
 80042be:	4770      	bx	lr

080042c0 <__udivmoddi4>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	9d08      	ldr	r5, [sp, #32]
 80042c6:	460c      	mov	r4, r1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d14e      	bne.n	800436a <__udivmoddi4+0xaa>
 80042cc:	4694      	mov	ip, r2
 80042ce:	458c      	cmp	ip, r1
 80042d0:	4686      	mov	lr, r0
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	d962      	bls.n	800439e <__udivmoddi4+0xde>
 80042d8:	b14a      	cbz	r2, 80042ee <__udivmoddi4+0x2e>
 80042da:	f1c2 0320 	rsb	r3, r2, #32
 80042de:	4091      	lsls	r1, r2
 80042e0:	fa20 f303 	lsr.w	r3, r0, r3
 80042e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80042e8:	4319      	orrs	r1, r3
 80042ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80042ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80042f2:	fa1f f68c 	uxth.w	r6, ip
 80042f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80042fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80042fe:	fb07 1114 	mls	r1, r7, r4, r1
 8004302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004306:	fb04 f106 	mul.w	r1, r4, r6
 800430a:	4299      	cmp	r1, r3
 800430c:	d90a      	bls.n	8004324 <__udivmoddi4+0x64>
 800430e:	eb1c 0303 	adds.w	r3, ip, r3
 8004312:	f104 30ff 	add.w	r0, r4, #4294967295
 8004316:	f080 8112 	bcs.w	800453e <__udivmoddi4+0x27e>
 800431a:	4299      	cmp	r1, r3
 800431c:	f240 810f 	bls.w	800453e <__udivmoddi4+0x27e>
 8004320:	3c02      	subs	r4, #2
 8004322:	4463      	add	r3, ip
 8004324:	1a59      	subs	r1, r3, r1
 8004326:	fa1f f38e 	uxth.w	r3, lr
 800432a:	fbb1 f0f7 	udiv	r0, r1, r7
 800432e:	fb07 1110 	mls	r1, r7, r0, r1
 8004332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004336:	fb00 f606 	mul.w	r6, r0, r6
 800433a:	429e      	cmp	r6, r3
 800433c:	d90a      	bls.n	8004354 <__udivmoddi4+0x94>
 800433e:	eb1c 0303 	adds.w	r3, ip, r3
 8004342:	f100 31ff 	add.w	r1, r0, #4294967295
 8004346:	f080 80fc 	bcs.w	8004542 <__udivmoddi4+0x282>
 800434a:	429e      	cmp	r6, r3
 800434c:	f240 80f9 	bls.w	8004542 <__udivmoddi4+0x282>
 8004350:	4463      	add	r3, ip
 8004352:	3802      	subs	r0, #2
 8004354:	1b9b      	subs	r3, r3, r6
 8004356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800435a:	2100      	movs	r1, #0
 800435c:	b11d      	cbz	r5, 8004366 <__udivmoddi4+0xa6>
 800435e:	40d3      	lsrs	r3, r2
 8004360:	2200      	movs	r2, #0
 8004362:	e9c5 3200 	strd	r3, r2, [r5]
 8004366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436a:	428b      	cmp	r3, r1
 800436c:	d905      	bls.n	800437a <__udivmoddi4+0xba>
 800436e:	b10d      	cbz	r5, 8004374 <__udivmoddi4+0xb4>
 8004370:	e9c5 0100 	strd	r0, r1, [r5]
 8004374:	2100      	movs	r1, #0
 8004376:	4608      	mov	r0, r1
 8004378:	e7f5      	b.n	8004366 <__udivmoddi4+0xa6>
 800437a:	fab3 f183 	clz	r1, r3
 800437e:	2900      	cmp	r1, #0
 8004380:	d146      	bne.n	8004410 <__udivmoddi4+0x150>
 8004382:	42a3      	cmp	r3, r4
 8004384:	d302      	bcc.n	800438c <__udivmoddi4+0xcc>
 8004386:	4290      	cmp	r0, r2
 8004388:	f0c0 80f0 	bcc.w	800456c <__udivmoddi4+0x2ac>
 800438c:	1a86      	subs	r6, r0, r2
 800438e:	eb64 0303 	sbc.w	r3, r4, r3
 8004392:	2001      	movs	r0, #1
 8004394:	2d00      	cmp	r5, #0
 8004396:	d0e6      	beq.n	8004366 <__udivmoddi4+0xa6>
 8004398:	e9c5 6300 	strd	r6, r3, [r5]
 800439c:	e7e3      	b.n	8004366 <__udivmoddi4+0xa6>
 800439e:	2a00      	cmp	r2, #0
 80043a0:	f040 8090 	bne.w	80044c4 <__udivmoddi4+0x204>
 80043a4:	eba1 040c 	sub.w	r4, r1, ip
 80043a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80043ac:	fa1f f78c 	uxth.w	r7, ip
 80043b0:	2101      	movs	r1, #1
 80043b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80043b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80043ba:	fb08 4416 	mls	r4, r8, r6, r4
 80043be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80043c2:	fb07 f006 	mul.w	r0, r7, r6
 80043c6:	4298      	cmp	r0, r3
 80043c8:	d908      	bls.n	80043dc <__udivmoddi4+0x11c>
 80043ca:	eb1c 0303 	adds.w	r3, ip, r3
 80043ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80043d2:	d202      	bcs.n	80043da <__udivmoddi4+0x11a>
 80043d4:	4298      	cmp	r0, r3
 80043d6:	f200 80cd 	bhi.w	8004574 <__udivmoddi4+0x2b4>
 80043da:	4626      	mov	r6, r4
 80043dc:	1a1c      	subs	r4, r3, r0
 80043de:	fa1f f38e 	uxth.w	r3, lr
 80043e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80043e6:	fb08 4410 	mls	r4, r8, r0, r4
 80043ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80043ee:	fb00 f707 	mul.w	r7, r0, r7
 80043f2:	429f      	cmp	r7, r3
 80043f4:	d908      	bls.n	8004408 <__udivmoddi4+0x148>
 80043f6:	eb1c 0303 	adds.w	r3, ip, r3
 80043fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80043fe:	d202      	bcs.n	8004406 <__udivmoddi4+0x146>
 8004400:	429f      	cmp	r7, r3
 8004402:	f200 80b0 	bhi.w	8004566 <__udivmoddi4+0x2a6>
 8004406:	4620      	mov	r0, r4
 8004408:	1bdb      	subs	r3, r3, r7
 800440a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800440e:	e7a5      	b.n	800435c <__udivmoddi4+0x9c>
 8004410:	f1c1 0620 	rsb	r6, r1, #32
 8004414:	408b      	lsls	r3, r1
 8004416:	fa22 f706 	lsr.w	r7, r2, r6
 800441a:	431f      	orrs	r7, r3
 800441c:	fa20 fc06 	lsr.w	ip, r0, r6
 8004420:	fa04 f301 	lsl.w	r3, r4, r1
 8004424:	ea43 030c 	orr.w	r3, r3, ip
 8004428:	40f4      	lsrs	r4, r6
 800442a:	fa00 f801 	lsl.w	r8, r0, r1
 800442e:	0c38      	lsrs	r0, r7, #16
 8004430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8004434:	fbb4 fef0 	udiv	lr, r4, r0
 8004438:	fa1f fc87 	uxth.w	ip, r7
 800443c:	fb00 441e 	mls	r4, r0, lr, r4
 8004440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004444:	fb0e f90c 	mul.w	r9, lr, ip
 8004448:	45a1      	cmp	r9, r4
 800444a:	fa02 f201 	lsl.w	r2, r2, r1
 800444e:	d90a      	bls.n	8004466 <__udivmoddi4+0x1a6>
 8004450:	193c      	adds	r4, r7, r4
 8004452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8004456:	f080 8084 	bcs.w	8004562 <__udivmoddi4+0x2a2>
 800445a:	45a1      	cmp	r9, r4
 800445c:	f240 8081 	bls.w	8004562 <__udivmoddi4+0x2a2>
 8004460:	f1ae 0e02 	sub.w	lr, lr, #2
 8004464:	443c      	add	r4, r7
 8004466:	eba4 0409 	sub.w	r4, r4, r9
 800446a:	fa1f f983 	uxth.w	r9, r3
 800446e:	fbb4 f3f0 	udiv	r3, r4, r0
 8004472:	fb00 4413 	mls	r4, r0, r3, r4
 8004476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800447a:	fb03 fc0c 	mul.w	ip, r3, ip
 800447e:	45a4      	cmp	ip, r4
 8004480:	d907      	bls.n	8004492 <__udivmoddi4+0x1d2>
 8004482:	193c      	adds	r4, r7, r4
 8004484:	f103 30ff 	add.w	r0, r3, #4294967295
 8004488:	d267      	bcs.n	800455a <__udivmoddi4+0x29a>
 800448a:	45a4      	cmp	ip, r4
 800448c:	d965      	bls.n	800455a <__udivmoddi4+0x29a>
 800448e:	3b02      	subs	r3, #2
 8004490:	443c      	add	r4, r7
 8004492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8004496:	fba0 9302 	umull	r9, r3, r0, r2
 800449a:	eba4 040c 	sub.w	r4, r4, ip
 800449e:	429c      	cmp	r4, r3
 80044a0:	46ce      	mov	lr, r9
 80044a2:	469c      	mov	ip, r3
 80044a4:	d351      	bcc.n	800454a <__udivmoddi4+0x28a>
 80044a6:	d04e      	beq.n	8004546 <__udivmoddi4+0x286>
 80044a8:	b155      	cbz	r5, 80044c0 <__udivmoddi4+0x200>
 80044aa:	ebb8 030e 	subs.w	r3, r8, lr
 80044ae:	eb64 040c 	sbc.w	r4, r4, ip
 80044b2:	fa04 f606 	lsl.w	r6, r4, r6
 80044b6:	40cb      	lsrs	r3, r1
 80044b8:	431e      	orrs	r6, r3
 80044ba:	40cc      	lsrs	r4, r1
 80044bc:	e9c5 6400 	strd	r6, r4, [r5]
 80044c0:	2100      	movs	r1, #0
 80044c2:	e750      	b.n	8004366 <__udivmoddi4+0xa6>
 80044c4:	f1c2 0320 	rsb	r3, r2, #32
 80044c8:	fa20 f103 	lsr.w	r1, r0, r3
 80044cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80044d0:	fa24 f303 	lsr.w	r3, r4, r3
 80044d4:	4094      	lsls	r4, r2
 80044d6:	430c      	orrs	r4, r1
 80044d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80044dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80044e0:	fa1f f78c 	uxth.w	r7, ip
 80044e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80044e8:	fb08 3110 	mls	r1, r8, r0, r3
 80044ec:	0c23      	lsrs	r3, r4, #16
 80044ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80044f2:	fb00 f107 	mul.w	r1, r0, r7
 80044f6:	4299      	cmp	r1, r3
 80044f8:	d908      	bls.n	800450c <__udivmoddi4+0x24c>
 80044fa:	eb1c 0303 	adds.w	r3, ip, r3
 80044fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8004502:	d22c      	bcs.n	800455e <__udivmoddi4+0x29e>
 8004504:	4299      	cmp	r1, r3
 8004506:	d92a      	bls.n	800455e <__udivmoddi4+0x29e>
 8004508:	3802      	subs	r0, #2
 800450a:	4463      	add	r3, ip
 800450c:	1a5b      	subs	r3, r3, r1
 800450e:	b2a4      	uxth	r4, r4
 8004510:	fbb3 f1f8 	udiv	r1, r3, r8
 8004514:	fb08 3311 	mls	r3, r8, r1, r3
 8004518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800451c:	fb01 f307 	mul.w	r3, r1, r7
 8004520:	42a3      	cmp	r3, r4
 8004522:	d908      	bls.n	8004536 <__udivmoddi4+0x276>
 8004524:	eb1c 0404 	adds.w	r4, ip, r4
 8004528:	f101 36ff 	add.w	r6, r1, #4294967295
 800452c:	d213      	bcs.n	8004556 <__udivmoddi4+0x296>
 800452e:	42a3      	cmp	r3, r4
 8004530:	d911      	bls.n	8004556 <__udivmoddi4+0x296>
 8004532:	3902      	subs	r1, #2
 8004534:	4464      	add	r4, ip
 8004536:	1ae4      	subs	r4, r4, r3
 8004538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800453c:	e739      	b.n	80043b2 <__udivmoddi4+0xf2>
 800453e:	4604      	mov	r4, r0
 8004540:	e6f0      	b.n	8004324 <__udivmoddi4+0x64>
 8004542:	4608      	mov	r0, r1
 8004544:	e706      	b.n	8004354 <__udivmoddi4+0x94>
 8004546:	45c8      	cmp	r8, r9
 8004548:	d2ae      	bcs.n	80044a8 <__udivmoddi4+0x1e8>
 800454a:	ebb9 0e02 	subs.w	lr, r9, r2
 800454e:	eb63 0c07 	sbc.w	ip, r3, r7
 8004552:	3801      	subs	r0, #1
 8004554:	e7a8      	b.n	80044a8 <__udivmoddi4+0x1e8>
 8004556:	4631      	mov	r1, r6
 8004558:	e7ed      	b.n	8004536 <__udivmoddi4+0x276>
 800455a:	4603      	mov	r3, r0
 800455c:	e799      	b.n	8004492 <__udivmoddi4+0x1d2>
 800455e:	4630      	mov	r0, r6
 8004560:	e7d4      	b.n	800450c <__udivmoddi4+0x24c>
 8004562:	46d6      	mov	lr, sl
 8004564:	e77f      	b.n	8004466 <__udivmoddi4+0x1a6>
 8004566:	4463      	add	r3, ip
 8004568:	3802      	subs	r0, #2
 800456a:	e74d      	b.n	8004408 <__udivmoddi4+0x148>
 800456c:	4606      	mov	r6, r0
 800456e:	4623      	mov	r3, r4
 8004570:	4608      	mov	r0, r1
 8004572:	e70f      	b.n	8004394 <__udivmoddi4+0xd4>
 8004574:	3e02      	subs	r6, #2
 8004576:	4463      	add	r3, ip
 8004578:	e730      	b.n	80043dc <__udivmoddi4+0x11c>
 800457a:	bf00      	nop

0800457c <__aeabi_idiv0>:
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop

08004580 <UART_init>:
/* USER CODE BEGIN 0 */
char recvData[16384]; //16KB
char recv_fw_done_flag = 0;

void UART_init()
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	4b2c      	ldr	r3, [pc, #176]	@ (800463c <UART_init+0xbc>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	4a2b      	ldr	r2, [pc, #172]	@ (800463c <UART_init+0xbc>)
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	6313      	str	r3, [r2, #48]	@ 0x30
 8004596:	4b29      	ldr	r3, [pc, #164]	@ (800463c <UART_init+0xbc>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
	//set PB6 as UART1_Tx(AF07) and PB7 as UART1_Rx(AF07)
	uint32_t* MODER = (uint32_t*)(0x40020400); //GPIOB
 80045a2:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <UART_init+0xc0>)
 80045a4:	617b      	str	r3, [r7, #20]
	uint32_t* AFRL = (uint32_t*)(0x40020420); //alternate function Low
 80045a6:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <UART_init+0xc4>)
 80045a8:	613b      	str	r3, [r7, #16]
	//set alternate function mode
	*MODER &= ~(0b1111 << 12);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	601a      	str	r2, [r3, #0]
	*MODER |= (0b10 << 12) | (0b10 << 14);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	601a      	str	r2, [r3, #0]

	*AFRL &= ~(0xff << 24);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	601a      	str	r2, [r3, #0]
	*AFRL |= (7<<24) | (7<<28); //set AF07 for PB6 and PB7
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	601a      	str	r2, [r3, #0]
	//	+ baudrate: 9600
	//	+frame:
	//      *data len: 8byte
	//      *parity (none/odd/even): none

	__HAL_RCC_USART1_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4b17      	ldr	r3, [pc, #92]	@ (800463c <UART_init+0xbc>)
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	4a16      	ldr	r2, [pc, #88]	@ (800463c <UART_init+0xbc>)
 80045e4:	f043 0310 	orr.w	r3, r3, #16
 80045e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ea:	4b14      	ldr	r3, [pc, #80]	@ (800463c <UART_init+0xbc>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
	uint32_t* BRR = (uint32_t*)(0x40011008);
 80045f6:	4b14      	ldr	r3, [pc, #80]	@ (8004648 <UART_init+0xc8>)
 80045f8:	60fb      	str	r3, [r7, #12]
	uint32_t* CR1 = (uint32_t*)(0x4001100c);
 80045fa:	4b14      	ldr	r3, [pc, #80]	@ (800464c <UART_init+0xcc>)
 80045fc:	60bb      	str	r3, [r7, #8]
	*BRR = (104 << 4) | (3 << 0); 	//set baudrate
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f240 6283 	movw	r2, #1667	@ 0x683
 8004604:	601a      	str	r2, [r3, #0]
	*CR1 &= ~(1 << 10);			//disable parity
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	601a      	str	r2, [r3, #0]
	*CR1 &= ~(1 << 12);				//set data len as 8bits data
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	601a      	str	r2, [r3, #0]

	*CR1 |= (1<<13) | (1 << 2) | (1 << 3);// enable transmiter, receiver, uart enable
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004626:	f043 030c 	orr.w	r3, r3, #12
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	6013      	str	r3, [r2, #0]
#else
	//when RXNE is set, send signal to DMA2, DMA2 copy move data to RAM
//	uint32_t* CR3 = (uint32_t*)(0x40011014);
//	*CR3 |= (1<<6);
#endif
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	40020400 	.word	0x40020400
 8004644:	40020420 	.word	0x40020420
 8004648:	40011008 	.word	0x40011008
 800464c:	4001100c 	.word	0x4001100c

08004650 <UART1_Send_1byte>:

void UART1_Send_1byte(char data)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
	uint32_t* SR = (uint32_t*)(0x40011000);
 800465a:	4b10      	ldr	r3, [pc, #64]	@ (800469c <UART1_Send_1byte+0x4c>)
 800465c:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <UART1_Send_1byte+0x50>)
 8004660:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7) & 1) == 0); 	// wait data empty
 8004662:	bf00      	nop
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f9      	beq.n	8004664 <UART1_Send_1byte+0x14>
	*DR = data;						//write data to DR to UART transfer data (TX: PB6)
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6) & 1) == 0); 	//wait transmitter of UART1 complete transfer
 8004676:	bf00      	nop
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f9      	beq.n	8004678 <UART1_Send_1byte+0x28>
	*SR &= ~(1 << 6);				//Clear TC flash
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40011000 	.word	0x40011000
 80046a0:	40011004 	.word	0x40011004

080046a4 <UART1_Send_String>:

void UART1_Send_String(char* msg)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fd97 	bl	80041e0 <strlen>
 80046b2:	4603      	mov	r3, r0
 80046b4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < msg_len; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e009      	b.n	80046d0 <UART1_Send_String+0x2c>
	{
		UART1_Send_1byte(msg[i]);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ffc3 	bl	8004650 <UART1_Send_1byte>
	for(int i = 0; i < msg_len; i++)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	dbf1      	blt.n	80046bc <UART1_Send_String+0x18>
	}
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <UART1_Recv_1Byte>:

char UART1_Recv_1Byte()
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)(0x40011000);
 80046ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004714 <UART1_Recv_1Byte+0x30>)
 80046ec:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004718 <UART1_Recv_1Byte+0x34>)
 80046f0:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 5) & 1) == 0); // wait RXNE flag to read recv data
 80046f2:	bf00      	nop
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f9      	beq.n	80046f4 <UART1_Recv_1Byte+0x10>
	char recv_data = *DR;			//read recv data
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	71fb      	strb	r3, [r7, #7]
	return recv_data;
 8004706:	79fb      	ldrb	r3, [r7, #7]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40011000 	.word	0x40011000
 8004718:	40011004 	.word	0x40011004

0800471c <dma2_uart1rx_init>:

}

#define DMA2_ADDRESS 0x40026400
void dma2_uart1rx_init(int len)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	@ 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	uint32_t* CR3 = (uint32_t*)(0x40011014);
 8004724:	4b1f      	ldr	r3, [pc, #124]	@ (80047a4 <dma2_uart1rx_init+0x88>)
 8004726:	61fb      	str	r3, [r7, #28]
	*CR3 |= (1 << 6);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	601a      	str	r2, [r3, #0]

	__HAL_RCC_DMA2_CLK_ENABLE();
 8004734:	2300      	movs	r3, #0
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <dma2_uart1rx_init+0x8c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	4a1a      	ldr	r2, [pc, #104]	@ (80047a8 <dma2_uart1rx_init+0x8c>)
 800473e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004742:	6313      	str	r3, [r2, #48]	@ 0x30
 8004744:	4b18      	ldr	r3, [pc, #96]	@ (80047a8 <dma2_uart1rx_init+0x8c>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
	//use DMA2 stream 5 channel 4 --> UART1_Rx (DMA mapping tabble)
	uint32_t* DMA_S5CR = (uint32_t*)(DMA2_ADDRESS + 0x10 + 0x18 * 5);
 8004750:	4b16      	ldr	r3, [pc, #88]	@ (80047ac <dma2_uart1rx_init+0x90>)
 8004752:	61bb      	str	r3, [r7, #24]
	uint32_t* DMA_S5NDTR = (uint32_t*)(DMA2_ADDRESS + 0x14 + 0x18 * 5);
 8004754:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <dma2_uart1rx_init+0x94>)
 8004756:	617b      	str	r3, [r7, #20]
	uint32_t* DMA_S5PAR = (uint32_t*)(DMA2_ADDRESS + 0x18 + 0x18 * 5);
 8004758:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <dma2_uart1rx_init+0x98>)
 800475a:	613b      	str	r3, [r7, #16]
	uint32_t* DMA_S5M0AR = (uint32_t*)(DMA2_ADDRESS + 0x1c + 0x18 * 5);
 800475c:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <dma2_uart1rx_init+0x9c>)
 800475e:	60fb      	str	r3, [r7, #12]
	/*
	 * size: 7bytes
	 * from: UART_DR (0x40011004)
	 * to: recvData(0x20000428)
	 */
	*DMA_S5NDTR = len;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	601a      	str	r2, [r3, #0]
	*DMA_S5PAR = 0x40011004;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4a14      	ldr	r2, [pc, #80]	@ (80047bc <dma2_uart1rx_init+0xa0>)
 800476a:	601a      	str	r2, [r3, #0]
	*DMA_S5M0AR = (uint32_t*)recvData;
 800476c:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <dma2_uart1rx_init+0xa4>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]

	*DMA_S5CR |= (0b100 << 25); // select channel 4 for stream 5
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	601a      	str	r2, [r3, #0]
	*DMA_S5CR |= (0b1 << 10); // enable memory incremen mode //mỗi lần nhận dữ liệu thì tăng lên tránh ghi đè
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	601a      	str	r2, [r3, #0]
//	*DMA_S5CR |= (0b1 << 8); // enable circular mode // khi nhận đủ 7 byte thì nó nhận tiếp và bỏ lại vị trí 1 như ring buffer
//	*DMA_S5CR |= (0b1 << 4); // enable tranfer complete interrupt
	*DMA_S5CR |= (0b1 << 0); //enable DMA2 stream 5
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	601a      	str	r2, [r3, #0]

//	uint32_t* ISER2 = (uint32_t*)(0xE000E108);
//	*ISER2 |= 1 << (68-64);
}
 8004796:	bf00      	nop
 8004798:	3724      	adds	r7, #36	@ 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40011014 	.word	0x40011014
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40026488 	.word	0x40026488
 80047b0:	4002648c 	.word	0x4002648c
 80047b4:	40026490 	.word	0x40026490
 80047b8:	40026494 	.word	0x40026494
 80047bc:	40011004 	.word	0x40011004
 80047c0:	20000078 	.word	0x20000078

080047c4 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler()
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
	__asm("NOP");
 80047ca:	bf00      	nop
	//clear interrupt flag -> transfer complete interrupt
	uint32_t* HIFCR = (uint32_t*)(DMA2_ADDRESS + 0x0C);
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <DMA2_Stream5_IRQHandler+0x2c>)
 80047ce:	607b      	str	r3, [r7, #4]
	*HIFCR |= (1 << 11);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]

	recv_fw_done_flag = 1;
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <DMA2_Stream5_IRQHandler+0x30>)
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	4002640c 	.word	0x4002640c
 80047f4:	20004078 	.word	0x20004078

080047f8 <Flash_Erase_Sector>:
#define FLASH_ADDR_BASE 0x40023C00
void Flash_Erase_Sector(char sector)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
	uint32_t* FLASH_SR = (uint32_t*)(FLASH_ADDR_BASE + 0x0C);
 8004802:	4b1d      	ldr	r3, [pc, #116]	@ (8004878 <Flash_Erase_Sector+0x80>)
 8004804:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)(FLASH_ADDR_BASE + 0x10);
 8004806:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <Flash_Erase_Sector+0x84>)
 8004808:	613b      	str	r3, [r7, #16]
	uint32_t* FLASH_KEYR = (uint32_t*)(FLASH_ADDR_BASE + 0x04);
 800480a:	4b1d      	ldr	r3, [pc, #116]	@ (8004880 <Flash_Erase_Sector+0x88>)
 800480c:	60fb      	str	r3, [r7, #12]
	//Check that no Flash memory operation is ongoing. wait BSY
	while(((*FLASH_SR >> 16) & 1) == 1);
 800480e:	bf00      	nop
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f9      	bne.n	8004810 <Flash_Erase_Sector+0x18>
	if(((*FLASH_CR >> 31) & 1) == 1)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0fdb      	lsrs	r3, r3, #31
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <Flash_Erase_Sector+0x3a>
	{
		//unlock CR
		*FLASH_KEYR = 0x45670123;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <Flash_Erase_Sector+0x8c>)
 800482a:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a16      	ldr	r2, [pc, #88]	@ (8004888 <Flash_Erase_Sector+0x90>)
 8004830:	601a      	str	r2, [r3, #0]
	}
	*FLASH_CR |= (1 << 1) | (sector << 3);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4313      	orrs	r3, r2
 800483c:	f043 0202 	orr.w	r2, r3, #2
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (1 << 16); //start erase operation
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	601a      	str	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1); //wait BSY is clean
 8004850:	bf00      	nop
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f9      	bne.n	8004852 <Flash_Erase_Sector+0x5a>
	*FLASH_CR &= ~(1 << 1);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0202 	bic.w	r2, r3, #2
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	601a      	str	r2, [r3, #0]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40023c0c 	.word	0x40023c0c
 800487c:	40023c10 	.word	0x40023c10
 8004880:	40023c04 	.word	0x40023c04
 8004884:	45670123 	.word	0x45670123
 8004888:	cdef89ab 	.word	0xcdef89ab

0800488c <Flash_Program>:

void Flash_Program(uint8_t* addr, uint8_t value)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
	uint32_t* FLASH_SR = (uint32_t*)(FLASH_ADDR_BASE + 0x0C);
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <Flash_Program+0x74>)
 800489a:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)(FLASH_ADDR_BASE + 0x10);
 800489c:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <Flash_Program+0x78>)
 800489e:	613b      	str	r3, [r7, #16]
	uint32_t* FLASH_KEYR = (uint32_t*)(FLASH_ADDR_BASE + 0x04);
 80048a0:	4b19      	ldr	r3, [pc, #100]	@ (8004908 <Flash_Program+0x7c>)
 80048a2:	60fb      	str	r3, [r7, #12]
	if(((*FLASH_CR >> 31) & 1) == 1)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0fdb      	lsrs	r3, r3, #31
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <Flash_Program+0x2e>
	{
		//unlock CR
		*FLASH_KEYR = 0x45670123;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <Flash_Program+0x80>)
 80048b2:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a16      	ldr	r2, [pc, #88]	@ (8004910 <Flash_Program+0x84>)
 80048b8:	601a      	str	r2, [r3, #0]
	}
	//Check that no Flash memory operation is ongoing. wait BSY
	while(((*FLASH_SR >> 16) & 1) == 1);
 80048ba:	bf00      	nop
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f9      	bne.n	80048bc <Flash_Program+0x30>
	//set the PG bit in the FLASH_CR register
	*FLASH_CR |= (1 << 0);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	601a      	str	r2, [r3, #0]
	*addr = value;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	701a      	strb	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);
 80048da:	bf00      	nop
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f9      	bne.n	80048dc <Flash_Program+0x50>
	*FLASH_CR &= ~(1 << 0);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 0201 	bic.w	r2, r3, #1
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40023c0c 	.word	0x40023c0c
 8004904:	40023c10 	.word	0x40023c10
 8004908:	40023c04 	.word	0x40023c04
 800490c:	45670123 	.word	0x45670123
 8004910:	cdef89ab 	.word	0xcdef89ab

08004914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800491a:	f000 f9df 	bl	8004cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800491e:	f000 f86b 	bl	80049f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004922:	f000 f8c7 	bl	8004ab4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  UART_init();
 8004926:	f7ff fe2b 	bl	8004580 <UART_init>
  UART1_Send_String("UPDATE FIRMWARE MODE\r\n");
 800492a:	4829      	ldr	r0, [pc, #164]	@ (80049d0 <main+0xbc>)
 800492c:	f7ff feba 	bl	80046a4 <UART1_Send_String>
  UART1_Send_String("Please send fw size: \r\n");
 8004930:	4828      	ldr	r0, [pc, #160]	@ (80049d4 <main+0xc0>)
 8004932:	f7ff feb7 	bl	80046a4 <UART1_Send_String>
  int i = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  while(strstr(recvData, "\r\n") == NULL)
 800493a:	e008      	b.n	800494e <main+0x3a>
  {
	  recvData[i++] = UART1_Recv_1Byte();
 800493c:	697c      	ldr	r4, [r7, #20]
 800493e:	1c63      	adds	r3, r4, #1
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	f7ff fecf 	bl	80046e4 <UART1_Recv_1Byte>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	4b23      	ldr	r3, [pc, #140]	@ (80049d8 <main+0xc4>)
 800494c:	551a      	strb	r2, [r3, r4]
  while(strstr(recvData, "\r\n") == NULL)
 800494e:	4923      	ldr	r1, [pc, #140]	@ (80049dc <main+0xc8>)
 8004950:	4821      	ldr	r0, [pc, #132]	@ (80049d8 <main+0xc4>)
 8004952:	f001 f911 	bl	8005b78 <strstr>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ef      	beq.n	800493c <main+0x28>
  }
  int fw_size = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	607b      	str	r3, [r7, #4]
  sscanf(recvData, "size = %d", &fw_size);
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	461a      	mov	r2, r3
 8004964:	491e      	ldr	r1, [pc, #120]	@ (80049e0 <main+0xcc>)
 8004966:	481c      	ldr	r0, [pc, #112]	@ (80049d8 <main+0xc4>)
 8004968:	f001 f8d2 	bl	8005b10 <siscanf>
  UART1_Send_String("Please send fw data: \r\n");
 800496c:	481d      	ldr	r0, [pc, #116]	@ (80049e4 <main+0xd0>)
 800496e:	f7ff fe99 	bl	80046a4 <UART1_Send_String>
  dma2_uart1rx_init(fw_size);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fed1 	bl	800471c <dma2_uart1rx_init>
  uint32_t* DMA_S5NDTR = (uint32_t*)(DMA2_ADDRESS + 0x14 + 0x18*5);
 800497a:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <main+0xd4>)
 800497c:	60fb      	str	r3, [r7, #12]
  while(*DMA_S5NDTR > 0);
 800497e:	bf00      	nop
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1fb      	bne.n	8004980 <main+0x6c>
  UART1_Send_String("rec fw finish \r\n");
 8004988:	4818      	ldr	r0, [pc, #96]	@ (80049ec <main+0xd8>)
 800498a:	f7ff fe8b 	bl	80046a4 <UART1_Send_String>
  Flash_Erase_Sector(2);
 800498e:	2002      	movs	r0, #2
 8004990:	f7ff ff32 	bl	80047f8 <Flash_Erase_Sector>
  for(int i = 0; i < fw_size; i++){
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e00f      	b.n	80049ba <main+0xa6>
	  Flash_Program((uint8_t*)(0x08008000+i), recvData[i]);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80049a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80049a4:	4618      	mov	r0, r3
 80049a6:	4a0c      	ldr	r2, [pc, #48]	@ (80049d8 <main+0xc4>)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f7ff ff6c 	bl	800488c <Flash_Program>
  for(int i = 0; i < fw_size; i++){
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3301      	adds	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	dbeb      	blt.n	800499a <main+0x86>
  }
  //RESET CHIP
  uint32_t* AIRCR = (uint32_t*)0xE000ed0c;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <main+0xdc>)
 80049c4:	60bb      	str	r3, [r7, #8]
  *AIRCR = (0x5FA << 16) | (1 << 2);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4a0a      	ldr	r2, [pc, #40]	@ (80049f4 <main+0xe0>)
 80049ca:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <main+0xb8>
 80049d0:	080067a0 	.word	0x080067a0
 80049d4:	080067b8 	.word	0x080067b8
 80049d8:	20000078 	.word	0x20000078
 80049dc:	080067d0 	.word	0x080067d0
 80049e0:	080067d4 	.word	0x080067d4
 80049e4:	080067e0 	.word	0x080067e0
 80049e8:	4002648c 	.word	0x4002648c
 80049ec:	080067f8 	.word	0x080067f8
 80049f0:	e000ed0c 	.word	0xe000ed0c
 80049f4:	05fa0004 	.word	0x05fa0004

080049f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b094      	sub	sp, #80	@ 0x50
 80049fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049fe:	f107 0320 	add.w	r3, r7, #32
 8004a02:	2230      	movs	r2, #48	@ 0x30
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 f8ae 	bl	8005b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <SystemClock_Config+0xb4>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	4a21      	ldr	r2, [pc, #132]	@ (8004aac <SystemClock_Config+0xb4>)
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <SystemClock_Config+0xb4>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab0 <SystemClock_Config+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <SystemClock_Config+0xb8>)
 8004a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <SystemClock_Config+0xb8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a54:	2302      	movs	r3, #2
 8004a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a64:	f107 0320 	add.w	r3, r7, #32
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fc2d 	bl	80052c8 <HAL_RCC_OscConfig>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004a74:	f000 f862 	bl	8004b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a78:	230f      	movs	r3, #15
 8004a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a8c:	f107 030c 	add.w	r3, r7, #12
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fe90 	bl	80057b8 <HAL_RCC_ClockConfig>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004a9e:	f000 f84d 	bl	8004b3c <Error_Handler>
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3750      	adds	r7, #80	@ 0x50
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <MX_GPIO_Init+0x80>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	4a18      	ldr	r2, [pc, #96]	@ (8004b34 <MX_GPIO_Init+0x80>)
 8004ad4:	f043 0308 	orr.w	r3, r3, #8
 8004ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ada:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <MX_GPIO_Init+0x80>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <MX_GPIO_Init+0x80>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	4a11      	ldr	r2, [pc, #68]	@ (8004b34 <MX_GPIO_Init+0x80>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004af6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <MX_GPIO_Init+0x80>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004b02:	2200      	movs	r2, #0
 8004b04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b08:	480b      	ldr	r0, [pc, #44]	@ (8004b38 <MX_GPIO_Init+0x84>)
 8004b0a:	f000 fbc3 	bl	8005294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b14:	2301      	movs	r3, #1
 8004b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4619      	mov	r1, r3
 8004b26:	4804      	ldr	r0, [pc, #16]	@ (8004b38 <MX_GPIO_Init+0x84>)
 8004b28:	f000 fa30 	bl	8004f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b2c:	bf00      	nop
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40020c00 	.word	0x40020c00

08004b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b40:	b672      	cpsid	i
}
 8004b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <Error_Handler+0x8>

08004b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_MspInit+0x4c>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	4a0f      	ldr	r2, [pc, #60]	@ (8004b94 <HAL_MspInit+0x4c>)
 8004b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b94 <HAL_MspInit+0x4c>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <HAL_MspInit+0x4c>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	4a08      	ldr	r2, [pc, #32]	@ (8004b94 <HAL_MspInit+0x4c>)
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_MspInit+0x4c>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800

08004b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <NMI_Handler+0x4>

08004ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <HardFault_Handler+0x4>

08004ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <MemManage_Handler+0x4>

08004bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <BusFault_Handler+0x4>

08004bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <UsageFault_Handler+0x4>

08004bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bee:	f000 f8c7 	bl	8004d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c00:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <_sbrk+0x5c>)
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <_sbrk+0x60>)
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <_sbrk+0x64>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <_sbrk+0x64>)
 8004c16:	4a12      	ldr	r2, [pc, #72]	@ (8004c60 <_sbrk+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <_sbrk+0x64>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4413      	add	r3, r2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d207      	bcs.n	8004c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c28:	f000 ffbc 	bl	8005ba4 <__errno>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	220c      	movs	r2, #12
 8004c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	e009      	b.n	8004c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c38:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <_sbrk+0x64>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <_sbrk+0x64>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <_sbrk+0x64>)
 8004c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20020000 	.word	0x20020000
 8004c58:	00000400 	.word	0x00000400
 8004c5c:	2000407c 	.word	0x2000407c
 8004c60:	200041d0 	.word	0x200041d0

08004c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <SystemInit+0x20>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	4a05      	ldr	r2, [pc, #20]	@ (8004c84 <SystemInit+0x20>)
 8004c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004cc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c8c:	f7ff ffea 	bl	8004c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c90:	480c      	ldr	r0, [pc, #48]	@ (8004cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c92:	490d      	ldr	r1, [pc, #52]	@ (8004cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c94:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c98:	e002      	b.n	8004ca0 <LoopCopyDataInit>

08004c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c9e:	3304      	adds	r3, #4

08004ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ca4:	d3f9      	bcc.n	8004c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8004cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cac:	e001      	b.n	8004cb2 <LoopFillZerobss>

08004cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cb0:	3204      	adds	r2, #4

08004cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cb4:	d3fb      	bcc.n	8004cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cb6:	f000 ff7b 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cba:	f7ff fe2b 	bl	8004914 <main>
  bx  lr    
 8004cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004ccc:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 8004cd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8004cd4:	200041cc 	.word	0x200041cc

08004cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cd8:	e7fe      	b.n	8004cd8 <ADC_IRQHandler>
	...

08004cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <HAL_Init+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8004d1c <HAL_Init+0x40>)
 8004ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_Init+0x40>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <HAL_Init+0x40>)
 8004cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cf8:	4b08      	ldr	r3, [pc, #32]	@ (8004d1c <HAL_Init+0x40>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a07      	ldr	r2, [pc, #28]	@ (8004d1c <HAL_Init+0x40>)
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d04:	2003      	movs	r0, #3
 8004d06:	f000 f90d 	bl	8004f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d0a:	200f      	movs	r0, #15
 8004d0c:	f000 f808 	bl	8004d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d10:	f7ff ff1a 	bl	8004b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023c00 	.word	0x40023c00

08004d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d28:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_InitTick+0x54>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_InitTick+0x58>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f917 	bl	8004f72 <HAL_SYSTICK_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00e      	b.n	8004d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d80a      	bhi.n	8004d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d54:	2200      	movs	r2, #0
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	f000 f8ed 	bl	8004f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d60:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <HAL_InitTick+0x5c>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000000 	.word	0x20000000
 8004d78:	20000008 	.word	0x20000008
 8004d7c:	20000004 	.word	0x20000004

08004d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d84:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_IncTick+0x20>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_IncTick+0x24>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	4a04      	ldr	r2, [pc, #16]	@ (8004da4 <HAL_IncTick+0x24>)
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000008 	.word	0x20000008
 8004da4:	20004080 	.word	0x20004080

08004da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return uwTick;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_GetTick+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20004080 	.word	0x20004080

08004dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df2:	4a04      	ldr	r2, [pc, #16]	@ (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60d3      	str	r3, [r2, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e0c:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <__NVIC_GetPriorityGrouping+0x18>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 0307 	and.w	r3, r3, #7
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db0a      	blt.n	8004e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	490c      	ldr	r1, [pc, #48]	@ (8004e70 <__NVIC_SetPriority+0x4c>)
 8004e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	440b      	add	r3, r1
 8004e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e4c:	e00a      	b.n	8004e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4908      	ldr	r1, [pc, #32]	@ (8004e74 <__NVIC_SetPriority+0x50>)
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	440b      	add	r3, r1
 8004e62:	761a      	strb	r2, [r3, #24]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000e100 	.word	0xe000e100
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f1c3 0307 	rsb	r3, r3, #7
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf28      	it	cs
 8004e96:	2304      	movcs	r3, #4
 8004e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d902      	bls.n	8004ea8 <NVIC_EncodePriority+0x30>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3b03      	subs	r3, #3
 8004ea6:	e000      	b.n	8004eaa <NVIC_EncodePriority+0x32>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	401a      	ands	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	43d9      	mvns	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed0:	4313      	orrs	r3, r2
         );
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3724      	adds	r7, #36	@ 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ef0:	d301      	bcc.n	8004ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00f      	b.n	8004f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <SysTick_Config+0x40>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004efe:	210f      	movs	r1, #15
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	f7ff ff8e 	bl	8004e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <SysTick_Config+0x40>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f0e:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <SysTick_Config+0x40>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010

08004f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff47 	bl	8004dc0 <__NVIC_SetPriorityGrouping>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f4c:	f7ff ff5c 	bl	8004e08 <__NVIC_GetPriorityGrouping>
 8004f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	6978      	ldr	r0, [r7, #20]
 8004f58:	f7ff ff8e 	bl	8004e78 <NVIC_EncodePriority>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ff5d 	bl	8004e24 <__NVIC_SetPriority>
}
 8004f6a:	bf00      	nop
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ffb0 	bl	8004ee0 <SysTick_Config>
 8004f80:	4603      	mov	r3, r0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	@ 0x24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e159      	b.n	800525c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fa8:	2201      	movs	r2, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	f040 8148 	bne.w	8005256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d005      	beq.n	8004fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d130      	bne.n	8005040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005014:	2201      	movs	r2, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 0201 	and.w	r2, r3, #1
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d017      	beq.n	800507c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2203      	movs	r2, #3
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d123      	bne.n	80050d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	08da      	lsrs	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3208      	adds	r2, #8
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	220f      	movs	r2, #15
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	08da      	lsrs	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3208      	adds	r2, #8
 80050ca:	69b9      	ldr	r1, [r7, #24]
 80050cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	2203      	movs	r2, #3
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80a2 	beq.w	8005256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b57      	ldr	r3, [pc, #348]	@ (8005274 <HAL_GPIO_Init+0x2e8>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	4a56      	ldr	r2, [pc, #344]	@ (8005274 <HAL_GPIO_Init+0x2e8>)
 800511c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005120:	6453      	str	r3, [r2, #68]	@ 0x44
 8005122:	4b54      	ldr	r3, [pc, #336]	@ (8005274 <HAL_GPIO_Init+0x2e8>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800512e:	4a52      	ldr	r2, [pc, #328]	@ (8005278 <HAL_GPIO_Init+0x2ec>)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	089b      	lsrs	r3, r3, #2
 8005134:	3302      	adds	r3, #2
 8005136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	220f      	movs	r2, #15
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a49      	ldr	r2, [pc, #292]	@ (800527c <HAL_GPIO_Init+0x2f0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d019      	beq.n	800518e <HAL_GPIO_Init+0x202>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a48      	ldr	r2, [pc, #288]	@ (8005280 <HAL_GPIO_Init+0x2f4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_GPIO_Init+0x1fe>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a47      	ldr	r2, [pc, #284]	@ (8005284 <HAL_GPIO_Init+0x2f8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00d      	beq.n	8005186 <HAL_GPIO_Init+0x1fa>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a46      	ldr	r2, [pc, #280]	@ (8005288 <HAL_GPIO_Init+0x2fc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <HAL_GPIO_Init+0x1f6>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a45      	ldr	r2, [pc, #276]	@ (800528c <HAL_GPIO_Init+0x300>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_GPIO_Init+0x1f2>
 800517a:	2304      	movs	r3, #4
 800517c:	e008      	b.n	8005190 <HAL_GPIO_Init+0x204>
 800517e:	2307      	movs	r3, #7
 8005180:	e006      	b.n	8005190 <HAL_GPIO_Init+0x204>
 8005182:	2303      	movs	r3, #3
 8005184:	e004      	b.n	8005190 <HAL_GPIO_Init+0x204>
 8005186:	2302      	movs	r3, #2
 8005188:	e002      	b.n	8005190 <HAL_GPIO_Init+0x204>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_GPIO_Init+0x204>
 800518e:	2300      	movs	r3, #0
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	f002 0203 	and.w	r2, r2, #3
 8005196:	0092      	lsls	r2, r2, #2
 8005198:	4093      	lsls	r3, r2
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a0:	4935      	ldr	r1, [pc, #212]	@ (8005278 <HAL_GPIO_Init+0x2ec>)
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	089b      	lsrs	r3, r3, #2
 80051a6:	3302      	adds	r3, #2
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051ae:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <HAL_GPIO_Init+0x304>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4013      	ands	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005290 <HAL_GPIO_Init+0x304>)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005290 <HAL_GPIO_Init+0x304>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051fc:	4a24      	ldr	r2, [pc, #144]	@ (8005290 <HAL_GPIO_Init+0x304>)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005202:	4b23      	ldr	r3, [pc, #140]	@ (8005290 <HAL_GPIO_Init+0x304>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005226:	4a1a      	ldr	r2, [pc, #104]	@ (8005290 <HAL_GPIO_Init+0x304>)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800522c:	4b18      	ldr	r3, [pc, #96]	@ (8005290 <HAL_GPIO_Init+0x304>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005250:	4a0f      	ldr	r2, [pc, #60]	@ (8005290 <HAL_GPIO_Init+0x304>)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b0f      	cmp	r3, #15
 8005260:	f67f aea2 	bls.w	8004fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	3724      	adds	r7, #36	@ 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800
 8005278:	40013800 	.word	0x40013800
 800527c:	40020000 	.word	0x40020000
 8005280:	40020400 	.word	0x40020400
 8005284:	40020800 	.word	0x40020800
 8005288:	40020c00 	.word	0x40020c00
 800528c:	40021000 	.word	0x40021000
 8005290:	40013c00 	.word	0x40013c00

08005294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a4:	787b      	ldrb	r3, [r7, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052b0:	e003      	b.n	80052ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	041a      	lsls	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	619a      	str	r2, [r3, #24]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e267      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d075      	beq.n	80053d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052e6:	4b88      	ldr	r3, [pc, #544]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00c      	beq.n	800530c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f2:	4b85      	ldr	r3, [pc, #532]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d112      	bne.n	8005324 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fe:	4b82      	ldr	r3, [pc, #520]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800530a:	d10b      	bne.n	8005324 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	4b7e      	ldr	r3, [pc, #504]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d05b      	beq.n	80053d0 <HAL_RCC_OscConfig+0x108>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d157      	bne.n	80053d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e242      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532c:	d106      	bne.n	800533c <HAL_RCC_OscConfig+0x74>
 800532e:	4b76      	ldr	r3, [pc, #472]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a75      	ldr	r2, [pc, #468]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e01d      	b.n	8005378 <HAL_RCC_OscConfig+0xb0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x98>
 8005346:	4b70      	ldr	r3, [pc, #448]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6f      	ldr	r2, [pc, #444]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b6d      	ldr	r3, [pc, #436]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6c      	ldr	r2, [pc, #432]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0xb0>
 8005360:	4b69      	ldr	r3, [pc, #420]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a68      	ldr	r2, [pc, #416]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b66      	ldr	r3, [pc, #408]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a65      	ldr	r2, [pc, #404]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7ff fd12 	bl	8004da8 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7ff fd0e 	bl	8004da8 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e207      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b5b      	ldr	r3, [pc, #364]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0xc0>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7ff fcfe 	bl	8004da8 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7ff fcfa 	bl	8004da8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	@ 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1f3      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	4b51      	ldr	r3, [pc, #324]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0xe8>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d063      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053de:	4b4a      	ldr	r3, [pc, #296]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ea:	4b47      	ldr	r3, [pc, #284]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d11c      	bne.n	8005430 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f6:	4b44      	ldr	r3, [pc, #272]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005402:	4b41      	ldr	r3, [pc, #260]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCC_OscConfig+0x152>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d001      	beq.n	800541a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e1c7      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b3b      	ldr	r3, [pc, #236]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4937      	ldr	r1, [pc, #220]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542e:	e03a      	b.n	80054a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005438:	4b34      	ldr	r3, [pc, #208]	@ (800550c <HAL_RCC_OscConfig+0x244>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7ff fcb3 	bl	8004da8 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005446:	f7ff fcaf 	bl	8004da8 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e1a8      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	4b2b      	ldr	r3, [pc, #172]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4925      	ldr	r1, [pc, #148]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]
 8005478:	e015      	b.n	80054a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b24      	ldr	r3, [pc, #144]	@ (800550c <HAL_RCC_OscConfig+0x244>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7ff fc92 	bl	8004da8 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005488:	f7ff fc8e 	bl	8004da8 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e187      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d036      	beq.n	8005520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ba:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <HAL_RCC_OscConfig+0x248>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7ff fc72 	bl	8004da8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c8:	f7ff fc6e 	bl	8004da8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e167      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <HAL_RCC_OscConfig+0x240>)
 80054dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x200>
 80054e6:	e01b      	b.n	8005520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e8:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <HAL_RCC_OscConfig+0x248>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ee:	f7ff fc5b 	bl	8004da8 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f4:	e00e      	b.n	8005514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f6:	f7ff fc57 	bl	8004da8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d907      	bls.n	8005514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e150      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
 8005508:	40023800 	.word	0x40023800
 800550c:	42470000 	.word	0x42470000
 8005510:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005514:	4b88      	ldr	r3, [pc, #544]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ea      	bne.n	80054f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8097 	beq.w	800565c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005532:	4b81      	ldr	r3, [pc, #516]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	4b7d      	ldr	r3, [pc, #500]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	4a7c      	ldr	r2, [pc, #496]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554c:	6413      	str	r3, [r2, #64]	@ 0x40
 800554e:	4b7a      	ldr	r3, [pc, #488]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555a:	2301      	movs	r3, #1
 800555c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555e:	4b77      	ldr	r3, [pc, #476]	@ (800573c <HAL_RCC_OscConfig+0x474>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d118      	bne.n	800559c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556a:	4b74      	ldr	r3, [pc, #464]	@ (800573c <HAL_RCC_OscConfig+0x474>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a73      	ldr	r2, [pc, #460]	@ (800573c <HAL_RCC_OscConfig+0x474>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005576:	f7ff fc17 	bl	8004da8 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557e:	f7ff fc13 	bl	8004da8 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e10c      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005590:	4b6a      	ldr	r3, [pc, #424]	@ (800573c <HAL_RCC_OscConfig+0x474>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_OscConfig+0x2ea>
 80055a4:	4b64      	ldr	r3, [pc, #400]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a8:	4a63      	ldr	r2, [pc, #396]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b0:	e01c      	b.n	80055ec <HAL_RCC_OscConfig+0x324>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x30c>
 80055ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	4a5e      	ldr	r2, [pc, #376]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055c0:	f043 0304 	orr.w	r3, r3, #4
 80055c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d2:	e00b      	b.n	80055ec <HAL_RCC_OscConfig+0x324>
 80055d4:	4b58      	ldr	r3, [pc, #352]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d8:	4a57      	ldr	r2, [pc, #348]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e0:	4b55      	ldr	r3, [pc, #340]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e4:	4a54      	ldr	r2, [pc, #336]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80055e6:	f023 0304 	bic.w	r3, r3, #4
 80055ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7ff fbd8 	bl	8004da8 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7ff fbd4 	bl	8004da8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0cb      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005612:	4b49      	ldr	r3, [pc, #292]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ee      	beq.n	80055fc <HAL_RCC_OscConfig+0x334>
 800561e:	e014      	b.n	800564a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005620:	f7ff fbc2 	bl	8004da8 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005626:	e00a      	b.n	800563e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005628:	f7ff fbbe 	bl	8004da8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e0b5      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563e:	4b3e      	ldr	r3, [pc, #248]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ee      	bne.n	8005628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005654:	4a38      	ldr	r2, [pc, #224]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800565a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80a1 	beq.w	80057a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005666:	4b34      	ldr	r3, [pc, #208]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b08      	cmp	r3, #8
 8005670:	d05c      	beq.n	800572c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d141      	bne.n	80056fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b31      	ldr	r3, [pc, #196]	@ (8005740 <HAL_RCC_OscConfig+0x478>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7ff fb92 	bl	8004da8 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7ff fb8e 	bl	8004da8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e087      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	3b01      	subs	r3, #1
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	491b      	ldr	r1, [pc, #108]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <HAL_RCC_OscConfig+0x478>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7ff fb67 	bl	8004da8 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056de:	f7ff fb63 	bl	8004da8 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e05c      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f0:	4b11      	ldr	r3, [pc, #68]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x416>
 80056fc:	e054      	b.n	80057a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <HAL_RCC_OscConfig+0x478>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7ff fb50 	bl	8004da8 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7ff fb4c 	bl	8004da8 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e045      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <HAL_RCC_OscConfig+0x470>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x444>
 800572a:	e03d      	b.n	80057a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d107      	bne.n	8005744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e038      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
 8005738:	40023800 	.word	0x40023800
 800573c:	40007000 	.word	0x40007000
 8005740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005744:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <HAL_RCC_OscConfig+0x4ec>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d028      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d121      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d11a      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800577a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800577c:	4293      	cmp	r3, r2
 800577e:	d111      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	3b01      	subs	r3, #1
 800578e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800

080057b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0cc      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057cc:	4b68      	ldr	r3, [pc, #416]	@ (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d90c      	bls.n	80057f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b65      	ldr	r3, [pc, #404]	@ (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b63      	ldr	r3, [pc, #396]	@ (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0b8      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d020      	beq.n	8005842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800580c:	4b59      	ldr	r3, [pc, #356]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4a58      	ldr	r2, [pc, #352]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005824:	4b53      	ldr	r3, [pc, #332]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a52      	ldr	r2, [pc, #328]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800582e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005830:	4b50      	ldr	r3, [pc, #320]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	494d      	ldr	r1, [pc, #308]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d044      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d107      	bne.n	8005866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	4b47      	ldr	r3, [pc, #284]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d119      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e07f      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d003      	beq.n	8005876 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005872:	2b03      	cmp	r3, #3
 8005874:	d107      	bne.n	8005886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005876:	4b3f      	ldr	r3, [pc, #252]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e06f      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005886:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e067      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005896:	4b37      	ldr	r3, [pc, #220]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f023 0203 	bic.w	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4934      	ldr	r1, [pc, #208]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a8:	f7ff fa7e 	bl	8004da8 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b0:	f7ff fa7a 	bl	8004da8 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e04f      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 020c 	and.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1eb      	bne.n	80058b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d8:	4b25      	ldr	r3, [pc, #148]	@ (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d20c      	bcs.n	8005900 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b22      	ldr	r3, [pc, #136]	@ (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	4b20      	ldr	r3, [pc, #128]	@ (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e032      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800590c:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4916      	ldr	r1, [pc, #88]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592a:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	490e      	ldr	r1, [pc, #56]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800593e:	f000 f821 	bl	8005984 <HAL_RCC_GetSysClockFreq>
 8005942:	4602      	mov	r2, r0
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	490a      	ldr	r1, [pc, #40]	@ (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 8005950:	5ccb      	ldrb	r3, [r1, r3]
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	4a09      	ldr	r2, [pc, #36]	@ (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800595a:	4b09      	ldr	r3, [pc, #36]	@ (8005980 <HAL_RCC_ClockConfig+0x1c8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f9de 	bl	8004d20 <HAL_InitTick>

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40023c00 	.word	0x40023c00
 8005974:	40023800 	.word	0x40023800
 8005978:	08006818 	.word	0x08006818
 800597c:	20000000 	.word	0x20000000
 8005980:	20000004 	.word	0x20000004

08005984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b090      	sub	sp, #64	@ 0x40
 800598a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800599c:	4b59      	ldr	r3, [pc, #356]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 030c 	and.w	r3, r3, #12
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d00d      	beq.n	80059c4 <HAL_RCC_GetSysClockFreq+0x40>
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	f200 80a1 	bhi.w	8005af0 <HAL_RCC_GetSysClockFreq+0x16c>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x34>
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d003      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0x3a>
 80059b6:	e09b      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b53      	ldr	r3, [pc, #332]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x184>)
 80059ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059bc:	e09b      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059be:	4b53      	ldr	r3, [pc, #332]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80059c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059c2:	e098      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d028      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059da:	4b4a      	ldr	r3, [pc, #296]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	2200      	movs	r2, #0
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059ec:	2100      	movs	r1, #0
 80059ee:	4b47      	ldr	r3, [pc, #284]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80059f0:	fb03 f201 	mul.w	r2, r3, r1
 80059f4:	2300      	movs	r3, #0
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	4a43      	ldr	r2, [pc, #268]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80059fe:	fba0 1202 	umull	r1, r2, r0, r2
 8005a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a04:	460a      	mov	r2, r1
 8005a06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0a:	4413      	add	r3, r2
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	2200      	movs	r2, #0
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	61fa      	str	r2, [r7, #28]
 8005a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a1e:	f7fe fc37 	bl	8004290 <__aeabi_uldivmod>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4613      	mov	r3, r2
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a2a:	e053      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2c:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	099b      	lsrs	r3, r3, #6
 8005a32:	2200      	movs	r2, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	617a      	str	r2, [r7, #20]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a3e:	f04f 0b00 	mov.w	fp, #0
 8005a42:	4652      	mov	r2, sl
 8005a44:	465b      	mov	r3, fp
 8005a46:	f04f 0000 	mov.w	r0, #0
 8005a4a:	f04f 0100 	mov.w	r1, #0
 8005a4e:	0159      	lsls	r1, r3, #5
 8005a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a54:	0150      	lsls	r0, r2, #5
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	ebb2 080a 	subs.w	r8, r2, sl
 8005a5e:	eb63 090b 	sbc.w	r9, r3, fp
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a76:	ebb2 0408 	subs.w	r4, r2, r8
 8005a7a:	eb63 0509 	sbc.w	r5, r3, r9
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	00eb      	lsls	r3, r5, #3
 8005a88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a8c:	00e2      	lsls	r2, r4, #3
 8005a8e:	4614      	mov	r4, r2
 8005a90:	461d      	mov	r5, r3
 8005a92:	eb14 030a 	adds.w	r3, r4, sl
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	eb45 030b 	adc.w	r3, r5, fp
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aaa:	4629      	mov	r1, r5
 8005aac:	028b      	lsls	r3, r1, #10
 8005aae:	4621      	mov	r1, r4
 8005ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	028a      	lsls	r2, r1, #10
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4619      	mov	r1, r3
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ac8:	f7fe fbe2 	bl	8004290 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005ae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af0:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x184>)
 8005af2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3740      	adds	r7, #64	@ 0x40
 8005afc:	46bd      	mov	sp, r7
 8005afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b02:	bf00      	nop
 8005b04:	40023800 	.word	0x40023800
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	017d7840 	.word	0x017d7840

08005b10 <siscanf>:
 8005b10:	b40e      	push	{r1, r2, r3}
 8005b12:	b530      	push	{r4, r5, lr}
 8005b14:	b09c      	sub	sp, #112	@ 0x70
 8005b16:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005b18:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005b1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005b20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005b24:	9002      	str	r0, [sp, #8]
 8005b26:	9006      	str	r0, [sp, #24]
 8005b28:	f7fe fb5a 	bl	80041e0 <strlen>
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <siscanf+0x4c>)
 8005b2e:	9003      	str	r0, [sp, #12]
 8005b30:	9007      	str	r0, [sp, #28]
 8005b32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b34:	480a      	ldr	r0, [pc, #40]	@ (8005b60 <siscanf+0x50>)
 8005b36:	9401      	str	r4, [sp, #4]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8005b3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b46:	462a      	mov	r2, r5
 8005b48:	4623      	mov	r3, r4
 8005b4a:	a902      	add	r1, sp, #8
 8005b4c:	6800      	ldr	r0, [r0, #0]
 8005b4e:	f000 f9a5 	bl	8005e9c <__ssvfiscanf_r>
 8005b52:	b01c      	add	sp, #112	@ 0x70
 8005b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b58:	b003      	add	sp, #12
 8005b5a:	4770      	bx	lr
 8005b5c:	08005b65 	.word	0x08005b65
 8005b60:	2000000c 	.word	0x2000000c

08005b64 <__seofread>:
 8005b64:	2000      	movs	r0, #0
 8005b66:	4770      	bx	lr

08005b68 <memset>:
 8005b68:	4402      	add	r2, r0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <memset+0xa>
 8005b70:	4770      	bx	lr
 8005b72:	f803 1b01 	strb.w	r1, [r3], #1
 8005b76:	e7f9      	b.n	8005b6c <memset+0x4>

08005b78 <strstr>:
 8005b78:	780a      	ldrb	r2, [r1, #0]
 8005b7a:	b570      	push	{r4, r5, r6, lr}
 8005b7c:	b96a      	cbnz	r2, 8005b9a <strstr+0x22>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d109      	bne.n	8005b98 <strstr+0x20>
 8005b84:	460c      	mov	r4, r1
 8005b86:	4605      	mov	r5, r0
 8005b88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f6      	beq.n	8005b7e <strstr+0x6>
 8005b90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005b94:	429e      	cmp	r6, r3
 8005b96:	d0f7      	beq.n	8005b88 <strstr+0x10>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	7803      	ldrb	r3, [r0, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1ef      	bne.n	8005b80 <strstr+0x8>
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	e7ec      	b.n	8005b7e <strstr+0x6>

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	@ (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8005be8 <__libc_init_array+0x38>)
 8005bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8005bec <__libc_init_array+0x3c>)
 8005bb6:	1b64      	subs	r4, r4, r5
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	2600      	movs	r6, #0
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8005bf0 <__libc_init_array+0x40>)
 8005bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8005bf4 <__libc_init_array+0x44>)
 8005bc4:	f000 fde0 	bl	8006788 <_init>
 8005bc8:	1b64      	subs	r4, r4, r5
 8005bca:	10a4      	asrs	r4, r4, #2
 8005bcc:	2600      	movs	r6, #0
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08006950 	.word	0x08006950
 8005bec:	08006950 	.word	0x08006950
 8005bf0:	08006950 	.word	0x08006950
 8005bf4:	08006954 	.word	0x08006954

08005bf8 <__retarget_lock_acquire_recursive>:
 8005bf8:	4770      	bx	lr

08005bfa <__retarget_lock_release_recursive>:
 8005bfa:	4770      	bx	lr

08005bfc <_free_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4605      	mov	r5, r0
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d041      	beq.n	8005c88 <_free_r+0x8c>
 8005c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c08:	1f0c      	subs	r4, r1, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bfb8      	it	lt
 8005c0e:	18e4      	addlt	r4, r4, r3
 8005c10:	f000 f8e0 	bl	8005dd4 <__malloc_lock>
 8005c14:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <_free_r+0x90>)
 8005c16:	6813      	ldr	r3, [r2, #0]
 8005c18:	b933      	cbnz	r3, 8005c28 <_free_r+0x2c>
 8005c1a:	6063      	str	r3, [r4, #4]
 8005c1c:	6014      	str	r4, [r2, #0]
 8005c1e:	4628      	mov	r0, r5
 8005c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c24:	f000 b8dc 	b.w	8005de0 <__malloc_unlock>
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d908      	bls.n	8005c3e <_free_r+0x42>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	1821      	adds	r1, r4, r0
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf01      	itttt	eq
 8005c34:	6819      	ldreq	r1, [r3, #0]
 8005c36:	685b      	ldreq	r3, [r3, #4]
 8005c38:	1809      	addeq	r1, r1, r0
 8005c3a:	6021      	streq	r1, [r4, #0]
 8005c3c:	e7ed      	b.n	8005c1a <_free_r+0x1e>
 8005c3e:	461a      	mov	r2, r3
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b10b      	cbz	r3, 8005c48 <_free_r+0x4c>
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d9fa      	bls.n	8005c3e <_free_r+0x42>
 8005c48:	6811      	ldr	r1, [r2, #0]
 8005c4a:	1850      	adds	r0, r2, r1
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d10b      	bne.n	8005c68 <_free_r+0x6c>
 8005c50:	6820      	ldr	r0, [r4, #0]
 8005c52:	4401      	add	r1, r0
 8005c54:	1850      	adds	r0, r2, r1
 8005c56:	4283      	cmp	r3, r0
 8005c58:	6011      	str	r1, [r2, #0]
 8005c5a:	d1e0      	bne.n	8005c1e <_free_r+0x22>
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	6053      	str	r3, [r2, #4]
 8005c62:	4408      	add	r0, r1
 8005c64:	6010      	str	r0, [r2, #0]
 8005c66:	e7da      	b.n	8005c1e <_free_r+0x22>
 8005c68:	d902      	bls.n	8005c70 <_free_r+0x74>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	e7d6      	b.n	8005c1e <_free_r+0x22>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	1821      	adds	r1, r4, r0
 8005c74:	428b      	cmp	r3, r1
 8005c76:	bf04      	itt	eq
 8005c78:	6819      	ldreq	r1, [r3, #0]
 8005c7a:	685b      	ldreq	r3, [r3, #4]
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	bf04      	itt	eq
 8005c80:	1809      	addeq	r1, r1, r0
 8005c82:	6021      	streq	r1, [r4, #0]
 8005c84:	6054      	str	r4, [r2, #4]
 8005c86:	e7ca      	b.n	8005c1e <_free_r+0x22>
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200041c8 	.word	0x200041c8

08005c90 <sbrk_aligned>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4e0f      	ldr	r6, [pc, #60]	@ (8005cd0 <sbrk_aligned+0x40>)
 8005c94:	460c      	mov	r4, r1
 8005c96:	6831      	ldr	r1, [r6, #0]
 8005c98:	4605      	mov	r5, r0
 8005c9a:	b911      	cbnz	r1, 8005ca2 <sbrk_aligned+0x12>
 8005c9c:	f000 fc34 	bl	8006508 <_sbrk_r>
 8005ca0:	6030      	str	r0, [r6, #0]
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 fc2f 	bl	8006508 <_sbrk_r>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	d103      	bne.n	8005cb6 <sbrk_aligned+0x26>
 8005cae:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	1cc4      	adds	r4, r0, #3
 8005cb8:	f024 0403 	bic.w	r4, r4, #3
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d0f8      	beq.n	8005cb2 <sbrk_aligned+0x22>
 8005cc0:	1a21      	subs	r1, r4, r0
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 fc20 	bl	8006508 <_sbrk_r>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d1f2      	bne.n	8005cb2 <sbrk_aligned+0x22>
 8005ccc:	e7ef      	b.n	8005cae <sbrk_aligned+0x1e>
 8005cce:	bf00      	nop
 8005cd0:	200041c4 	.word	0x200041c4

08005cd4 <_malloc_r>:
 8005cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd8:	1ccd      	adds	r5, r1, #3
 8005cda:	f025 0503 	bic.w	r5, r5, #3
 8005cde:	3508      	adds	r5, #8
 8005ce0:	2d0c      	cmp	r5, #12
 8005ce2:	bf38      	it	cc
 8005ce4:	250c      	movcc	r5, #12
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	4606      	mov	r6, r0
 8005cea:	db01      	blt.n	8005cf0 <_malloc_r+0x1c>
 8005cec:	42a9      	cmp	r1, r5
 8005cee:	d904      	bls.n	8005cfa <_malloc_r+0x26>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	6033      	str	r3, [r6, #0]
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dd0 <_malloc_r+0xfc>
 8005cfe:	f000 f869 	bl	8005dd4 <__malloc_lock>
 8005d02:	f8d8 3000 	ldr.w	r3, [r8]
 8005d06:	461c      	mov	r4, r3
 8005d08:	bb44      	cbnz	r4, 8005d5c <_malloc_r+0x88>
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff ffbf 	bl	8005c90 <sbrk_aligned>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	4604      	mov	r4, r0
 8005d16:	d158      	bne.n	8005dca <_malloc_r+0xf6>
 8005d18:	f8d8 4000 	ldr.w	r4, [r8]
 8005d1c:	4627      	mov	r7, r4
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	d143      	bne.n	8005daa <_malloc_r+0xd6>
 8005d22:	2c00      	cmp	r4, #0
 8005d24:	d04b      	beq.n	8005dbe <_malloc_r+0xea>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	eb04 0903 	add.w	r9, r4, r3
 8005d30:	f000 fbea 	bl	8006508 <_sbrk_r>
 8005d34:	4581      	cmp	r9, r0
 8005d36:	d142      	bne.n	8005dbe <_malloc_r+0xea>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	1a6d      	subs	r5, r5, r1
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f7ff ffa6 	bl	8005c90 <sbrk_aligned>
 8005d44:	3001      	adds	r0, #1
 8005d46:	d03a      	beq.n	8005dbe <_malloc_r+0xea>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	442b      	add	r3, r5
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	bb62      	cbnz	r2, 8005db0 <_malloc_r+0xdc>
 8005d56:	f8c8 7000 	str.w	r7, [r8]
 8005d5a:	e00f      	b.n	8005d7c <_malloc_r+0xa8>
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	1b52      	subs	r2, r2, r5
 8005d60:	d420      	bmi.n	8005da4 <_malloc_r+0xd0>
 8005d62:	2a0b      	cmp	r2, #11
 8005d64:	d917      	bls.n	8005d96 <_malloc_r+0xc2>
 8005d66:	1961      	adds	r1, r4, r5
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	6025      	str	r5, [r4, #0]
 8005d6c:	bf18      	it	ne
 8005d6e:	6059      	strne	r1, [r3, #4]
 8005d70:	6863      	ldr	r3, [r4, #4]
 8005d72:	bf08      	it	eq
 8005d74:	f8c8 1000 	streq.w	r1, [r8]
 8005d78:	5162      	str	r2, [r4, r5]
 8005d7a:	604b      	str	r3, [r1, #4]
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f82f 	bl	8005de0 <__malloc_unlock>
 8005d82:	f104 000b 	add.w	r0, r4, #11
 8005d86:	1d23      	adds	r3, r4, #4
 8005d88:	f020 0007 	bic.w	r0, r0, #7
 8005d8c:	1ac2      	subs	r2, r0, r3
 8005d8e:	bf1c      	itt	ne
 8005d90:	1a1b      	subne	r3, r3, r0
 8005d92:	50a3      	strne	r3, [r4, r2]
 8005d94:	e7af      	b.n	8005cf6 <_malloc_r+0x22>
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	bf0c      	ite	eq
 8005d9c:	f8c8 2000 	streq.w	r2, [r8]
 8005da0:	605a      	strne	r2, [r3, #4]
 8005da2:	e7eb      	b.n	8005d7c <_malloc_r+0xa8>
 8005da4:	4623      	mov	r3, r4
 8005da6:	6864      	ldr	r4, [r4, #4]
 8005da8:	e7ae      	b.n	8005d08 <_malloc_r+0x34>
 8005daa:	463c      	mov	r4, r7
 8005dac:	687f      	ldr	r7, [r7, #4]
 8005dae:	e7b6      	b.n	8005d1e <_malloc_r+0x4a>
 8005db0:	461a      	mov	r2, r3
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	d1fb      	bne.n	8005db0 <_malloc_r+0xdc>
 8005db8:	2300      	movs	r3, #0
 8005dba:	6053      	str	r3, [r2, #4]
 8005dbc:	e7de      	b.n	8005d7c <_malloc_r+0xa8>
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	6033      	str	r3, [r6, #0]
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f000 f80c 	bl	8005de0 <__malloc_unlock>
 8005dc8:	e794      	b.n	8005cf4 <_malloc_r+0x20>
 8005dca:	6005      	str	r5, [r0, #0]
 8005dcc:	e7d6      	b.n	8005d7c <_malloc_r+0xa8>
 8005dce:	bf00      	nop
 8005dd0:	200041c8 	.word	0x200041c8

08005dd4 <__malloc_lock>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	@ (8005ddc <__malloc_lock+0x8>)
 8005dd6:	f7ff bf0f 	b.w	8005bf8 <__retarget_lock_acquire_recursive>
 8005dda:	bf00      	nop
 8005ddc:	200041c0 	.word	0x200041c0

08005de0 <__malloc_unlock>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__malloc_unlock+0x8>)
 8005de2:	f7ff bf0a 	b.w	8005bfa <__retarget_lock_release_recursive>
 8005de6:	bf00      	nop
 8005de8:	200041c0 	.word	0x200041c0

08005dec <_sungetc_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	1c4b      	adds	r3, r1, #1
 8005df0:	4614      	mov	r4, r2
 8005df2:	d103      	bne.n	8005dfc <_sungetc_r+0x10>
 8005df4:	f04f 35ff 	mov.w	r5, #4294967295
 8005df8:	4628      	mov	r0, r5
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	8993      	ldrh	r3, [r2, #12]
 8005dfe:	f023 0320 	bic.w	r3, r3, #32
 8005e02:	8193      	strh	r3, [r2, #12]
 8005e04:	6853      	ldr	r3, [r2, #4]
 8005e06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e08:	b2cd      	uxtb	r5, r1
 8005e0a:	b18a      	cbz	r2, 8005e30 <_sungetc_r+0x44>
 8005e0c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	dd08      	ble.n	8005e24 <_sungetc_r+0x38>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	1e5a      	subs	r2, r3, #1
 8005e16:	6022      	str	r2, [r4, #0]
 8005e18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6063      	str	r3, [r4, #4]
 8005e22:	e7e9      	b.n	8005df8 <_sungetc_r+0xc>
 8005e24:	4621      	mov	r1, r4
 8005e26:	f000 fb34 	bl	8006492 <__submore>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d0f1      	beq.n	8005e12 <_sungetc_r+0x26>
 8005e2e:	e7e1      	b.n	8005df4 <_sungetc_r+0x8>
 8005e30:	6921      	ldr	r1, [r4, #16]
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	b141      	cbz	r1, 8005e48 <_sungetc_r+0x5c>
 8005e36:	4291      	cmp	r1, r2
 8005e38:	d206      	bcs.n	8005e48 <_sungetc_r+0x5c>
 8005e3a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005e3e:	42a9      	cmp	r1, r5
 8005e40:	d102      	bne.n	8005e48 <_sungetc_r+0x5c>
 8005e42:	3a01      	subs	r2, #1
 8005e44:	6022      	str	r2, [r4, #0]
 8005e46:	e7ea      	b.n	8005e1e <_sungetc_r+0x32>
 8005e48:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005e4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e52:	2303      	movs	r3, #3
 8005e54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005e56:	4623      	mov	r3, r4
 8005e58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e7de      	b.n	8005e20 <_sungetc_r+0x34>

08005e62 <__ssrefill_r>:
 8005e62:	b510      	push	{r4, lr}
 8005e64:	460c      	mov	r4, r1
 8005e66:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005e68:	b169      	cbz	r1, 8005e86 <__ssrefill_r+0x24>
 8005e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	d001      	beq.n	8005e76 <__ssrefill_r+0x14>
 8005e72:	f7ff fec3 	bl	8005bfc <_free_r>
 8005e76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	6360      	str	r0, [r4, #52]	@ 0x34
 8005e7e:	b113      	cbz	r3, 8005e86 <__ssrefill_r+0x24>
 8005e80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f043 0320 	orr.w	r3, r3, #32
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9a:	e7f3      	b.n	8005e84 <__ssrefill_r+0x22>

08005e9c <__ssvfiscanf_r>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005eac:	49a5      	ldr	r1, [pc, #660]	@ (8006144 <__ssvfiscanf_r+0x2a8>)
 8005eae:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005eb0:	f10d 0804 	add.w	r8, sp, #4
 8005eb4:	49a4      	ldr	r1, [pc, #656]	@ (8006148 <__ssvfiscanf_r+0x2ac>)
 8005eb6:	4fa5      	ldr	r7, [pc, #660]	@ (800614c <__ssvfiscanf_r+0x2b0>)
 8005eb8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	7813      	ldrb	r3, [r2, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8158 	beq.w	800617a <__ssvfiscanf_r+0x2de>
 8005eca:	5cf9      	ldrb	r1, [r7, r3]
 8005ecc:	f011 0108 	ands.w	r1, r1, #8
 8005ed0:	f102 0501 	add.w	r5, r2, #1
 8005ed4:	d019      	beq.n	8005f0a <__ssvfiscanf_r+0x6e>
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dd0f      	ble.n	8005efc <__ssvfiscanf_r+0x60>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	5cba      	ldrb	r2, [r7, r2]
 8005ee2:	0712      	lsls	r2, r2, #28
 8005ee4:	d401      	bmi.n	8005eea <__ssvfiscanf_r+0x4e>
 8005ee6:	462a      	mov	r2, r5
 8005ee8:	e7eb      	b.n	8005ec2 <__ssvfiscanf_r+0x26>
 8005eea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005eec:	3201      	adds	r2, #1
 8005eee:	9245      	str	r2, [sp, #276]	@ 0x114
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	6062      	str	r2, [r4, #4]
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	e7ec      	b.n	8005ed6 <__ssvfiscanf_r+0x3a>
 8005efc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005efe:	4621      	mov	r1, r4
 8005f00:	4630      	mov	r0, r6
 8005f02:	4798      	blx	r3
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d0e9      	beq.n	8005edc <__ssvfiscanf_r+0x40>
 8005f08:	e7ed      	b.n	8005ee6 <__ssvfiscanf_r+0x4a>
 8005f0a:	2b25      	cmp	r3, #37	@ 0x25
 8005f0c:	d012      	beq.n	8005f34 <__ssvfiscanf_r+0x98>
 8005f0e:	4699      	mov	r9, r3
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f340 8093 	ble.w	800603e <__ssvfiscanf_r+0x1a2>
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	7813      	ldrb	r3, [r2, #0]
 8005f1c:	454b      	cmp	r3, r9
 8005f1e:	f040 812c 	bne.w	800617a <__ssvfiscanf_r+0x2de>
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	9345      	str	r3, [sp, #276]	@ 0x114
 8005f32:	e7d8      	b.n	8005ee6 <__ssvfiscanf_r+0x4a>
 8005f34:	9141      	str	r1, [sp, #260]	@ 0x104
 8005f36:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005f38:	7853      	ldrb	r3, [r2, #1]
 8005f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f3c:	bf02      	ittt	eq
 8005f3e:	2310      	moveq	r3, #16
 8005f40:	1c95      	addeq	r5, r2, #2
 8005f42:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005f44:	220a      	movs	r2, #10
 8005f46:	46a9      	mov	r9, r5
 8005f48:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005f4c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	d91e      	bls.n	8005f92 <__ssvfiscanf_r+0xf6>
 8005f54:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006150 <__ssvfiscanf_r+0x2b4>
 8005f58:	2203      	movs	r2, #3
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	f7fe f948 	bl	80041f0 <memchr>
 8005f60:	b138      	cbz	r0, 8005f72 <__ssvfiscanf_r+0xd6>
 8005f62:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005f64:	eba0 000a 	sub.w	r0, r0, sl
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4083      	lsls	r3, r0
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005f70:	464d      	mov	r5, r9
 8005f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f76:	2b78      	cmp	r3, #120	@ 0x78
 8005f78:	d806      	bhi.n	8005f88 <__ssvfiscanf_r+0xec>
 8005f7a:	2b57      	cmp	r3, #87	@ 0x57
 8005f7c:	d810      	bhi.n	8005fa0 <__ssvfiscanf_r+0x104>
 8005f7e:	2b25      	cmp	r3, #37	@ 0x25
 8005f80:	d0c5      	beq.n	8005f0e <__ssvfiscanf_r+0x72>
 8005f82:	d857      	bhi.n	8006034 <__ssvfiscanf_r+0x198>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d065      	beq.n	8006054 <__ssvfiscanf_r+0x1b8>
 8005f88:	2303      	movs	r3, #3
 8005f8a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005f8c:	230a      	movs	r3, #10
 8005f8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005f90:	e078      	b.n	8006084 <__ssvfiscanf_r+0x1e8>
 8005f92:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005f94:	fb02 1103 	mla	r1, r2, r3, r1
 8005f98:	3930      	subs	r1, #48	@ 0x30
 8005f9a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005f9c:	464d      	mov	r5, r9
 8005f9e:	e7d2      	b.n	8005f46 <__ssvfiscanf_r+0xaa>
 8005fa0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005fa4:	2a20      	cmp	r2, #32
 8005fa6:	d8ef      	bhi.n	8005f88 <__ssvfiscanf_r+0xec>
 8005fa8:	a101      	add	r1, pc, #4	@ (adr r1, 8005fb0 <__ssvfiscanf_r+0x114>)
 8005faa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08006063 	.word	0x08006063
 8005fb4:	08005f89 	.word	0x08005f89
 8005fb8:	08005f89 	.word	0x08005f89
 8005fbc:	080060bd 	.word	0x080060bd
 8005fc0:	08005f89 	.word	0x08005f89
 8005fc4:	08005f89 	.word	0x08005f89
 8005fc8:	08005f89 	.word	0x08005f89
 8005fcc:	08005f89 	.word	0x08005f89
 8005fd0:	08005f89 	.word	0x08005f89
 8005fd4:	08005f89 	.word	0x08005f89
 8005fd8:	08005f89 	.word	0x08005f89
 8005fdc:	080060d3 	.word	0x080060d3
 8005fe0:	080060b9 	.word	0x080060b9
 8005fe4:	0800603b 	.word	0x0800603b
 8005fe8:	0800603b 	.word	0x0800603b
 8005fec:	0800603b 	.word	0x0800603b
 8005ff0:	08005f89 	.word	0x08005f89
 8005ff4:	08006075 	.word	0x08006075
 8005ff8:	08005f89 	.word	0x08005f89
 8005ffc:	08005f89 	.word	0x08005f89
 8006000:	08005f89 	.word	0x08005f89
 8006004:	08005f89 	.word	0x08005f89
 8006008:	080060e3 	.word	0x080060e3
 800600c:	0800607d 	.word	0x0800607d
 8006010:	0800605b 	.word	0x0800605b
 8006014:	08005f89 	.word	0x08005f89
 8006018:	08005f89 	.word	0x08005f89
 800601c:	080060df 	.word	0x080060df
 8006020:	08005f89 	.word	0x08005f89
 8006024:	080060b9 	.word	0x080060b9
 8006028:	08005f89 	.word	0x08005f89
 800602c:	08005f89 	.word	0x08005f89
 8006030:	08006063 	.word	0x08006063
 8006034:	3b45      	subs	r3, #69	@ 0x45
 8006036:	2b02      	cmp	r3, #2
 8006038:	d8a6      	bhi.n	8005f88 <__ssvfiscanf_r+0xec>
 800603a:	2305      	movs	r3, #5
 800603c:	e021      	b.n	8006082 <__ssvfiscanf_r+0x1e6>
 800603e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006040:	4621      	mov	r1, r4
 8006042:	4630      	mov	r0, r6
 8006044:	4798      	blx	r3
 8006046:	2800      	cmp	r0, #0
 8006048:	f43f af66 	beq.w	8005f18 <__ssvfiscanf_r+0x7c>
 800604c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800604e:	2800      	cmp	r0, #0
 8006050:	f040 808b 	bne.w	800616a <__ssvfiscanf_r+0x2ce>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e08b      	b.n	8006172 <__ssvfiscanf_r+0x2d6>
 800605a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800605c:	f042 0220 	orr.w	r2, r2, #32
 8006060:	9241      	str	r2, [sp, #260]	@ 0x104
 8006062:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006068:	9241      	str	r2, [sp, #260]	@ 0x104
 800606a:	2210      	movs	r2, #16
 800606c:	2b6e      	cmp	r3, #110	@ 0x6e
 800606e:	9242      	str	r2, [sp, #264]	@ 0x108
 8006070:	d902      	bls.n	8006078 <__ssvfiscanf_r+0x1dc>
 8006072:	e005      	b.n	8006080 <__ssvfiscanf_r+0x1e4>
 8006074:	2300      	movs	r3, #0
 8006076:	9342      	str	r3, [sp, #264]	@ 0x108
 8006078:	2303      	movs	r3, #3
 800607a:	e002      	b.n	8006082 <__ssvfiscanf_r+0x1e6>
 800607c:	2308      	movs	r3, #8
 800607e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006080:	2304      	movs	r3, #4
 8006082:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	dd39      	ble.n	80060fe <__ssvfiscanf_r+0x262>
 800608a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800608c:	0659      	lsls	r1, r3, #25
 800608e:	d404      	bmi.n	800609a <__ssvfiscanf_r+0x1fe>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	5cba      	ldrb	r2, [r7, r2]
 8006096:	0712      	lsls	r2, r2, #28
 8006098:	d438      	bmi.n	800610c <__ssvfiscanf_r+0x270>
 800609a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800609c:	2b02      	cmp	r3, #2
 800609e:	dc47      	bgt.n	8006130 <__ssvfiscanf_r+0x294>
 80060a0:	466b      	mov	r3, sp
 80060a2:	4622      	mov	r2, r4
 80060a4:	a941      	add	r1, sp, #260	@ 0x104
 80060a6:	4630      	mov	r0, r6
 80060a8:	f000 f86c 	bl	8006184 <_scanf_chars>
 80060ac:	2801      	cmp	r0, #1
 80060ae:	d064      	beq.n	800617a <__ssvfiscanf_r+0x2de>
 80060b0:	2802      	cmp	r0, #2
 80060b2:	f47f af18 	bne.w	8005ee6 <__ssvfiscanf_r+0x4a>
 80060b6:	e7c9      	b.n	800604c <__ssvfiscanf_r+0x1b0>
 80060b8:	220a      	movs	r2, #10
 80060ba:	e7d7      	b.n	800606c <__ssvfiscanf_r+0x1d0>
 80060bc:	4629      	mov	r1, r5
 80060be:	4640      	mov	r0, r8
 80060c0:	f000 f9ae 	bl	8006420 <__sccl>
 80060c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80060c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80060cc:	4605      	mov	r5, r0
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7d7      	b.n	8006082 <__ssvfiscanf_r+0x1e6>
 80060d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80060d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060d8:	9341      	str	r3, [sp, #260]	@ 0x104
 80060da:	2300      	movs	r3, #0
 80060dc:	e7d1      	b.n	8006082 <__ssvfiscanf_r+0x1e6>
 80060de:	2302      	movs	r3, #2
 80060e0:	e7cf      	b.n	8006082 <__ssvfiscanf_r+0x1e6>
 80060e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80060e4:	06c3      	lsls	r3, r0, #27
 80060e6:	f53f aefe 	bmi.w	8005ee6 <__ssvfiscanf_r+0x4a>
 80060ea:	9b00      	ldr	r3, [sp, #0]
 80060ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80060ee:	1d19      	adds	r1, r3, #4
 80060f0:	9100      	str	r1, [sp, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	07c0      	lsls	r0, r0, #31
 80060f6:	bf4c      	ite	mi
 80060f8:	801a      	strhmi	r2, [r3, #0]
 80060fa:	601a      	strpl	r2, [r3, #0]
 80060fc:	e6f3      	b.n	8005ee6 <__ssvfiscanf_r+0x4a>
 80060fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006100:	4621      	mov	r1, r4
 8006102:	4630      	mov	r0, r6
 8006104:	4798      	blx	r3
 8006106:	2800      	cmp	r0, #0
 8006108:	d0bf      	beq.n	800608a <__ssvfiscanf_r+0x1ee>
 800610a:	e79f      	b.n	800604c <__ssvfiscanf_r+0x1b0>
 800610c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800610e:	3201      	adds	r2, #1
 8006110:	9245      	str	r2, [sp, #276]	@ 0x114
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	3a01      	subs	r2, #1
 8006116:	2a00      	cmp	r2, #0
 8006118:	6062      	str	r2, [r4, #4]
 800611a:	dd02      	ble.n	8006122 <__ssvfiscanf_r+0x286>
 800611c:	3301      	adds	r3, #1
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	e7b6      	b.n	8006090 <__ssvfiscanf_r+0x1f4>
 8006122:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006124:	4621      	mov	r1, r4
 8006126:	4630      	mov	r0, r6
 8006128:	4798      	blx	r3
 800612a:	2800      	cmp	r0, #0
 800612c:	d0b0      	beq.n	8006090 <__ssvfiscanf_r+0x1f4>
 800612e:	e78d      	b.n	800604c <__ssvfiscanf_r+0x1b0>
 8006130:	2b04      	cmp	r3, #4
 8006132:	dc0f      	bgt.n	8006154 <__ssvfiscanf_r+0x2b8>
 8006134:	466b      	mov	r3, sp
 8006136:	4622      	mov	r2, r4
 8006138:	a941      	add	r1, sp, #260	@ 0x104
 800613a:	4630      	mov	r0, r6
 800613c:	f000 f87c 	bl	8006238 <_scanf_i>
 8006140:	e7b4      	b.n	80060ac <__ssvfiscanf_r+0x210>
 8006142:	bf00      	nop
 8006144:	08005ded 	.word	0x08005ded
 8006148:	08005e63 	.word	0x08005e63
 800614c:	08006848 	.word	0x08006848
 8006150:	08006828 	.word	0x08006828
 8006154:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <__ssvfiscanf_r+0x2e4>)
 8006156:	2b00      	cmp	r3, #0
 8006158:	f43f aec5 	beq.w	8005ee6 <__ssvfiscanf_r+0x4a>
 800615c:	466b      	mov	r3, sp
 800615e:	4622      	mov	r2, r4
 8006160:	a941      	add	r1, sp, #260	@ 0x104
 8006162:	4630      	mov	r0, r6
 8006164:	f3af 8000 	nop.w
 8006168:	e7a0      	b.n	80060ac <__ssvfiscanf_r+0x210>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	065b      	lsls	r3, r3, #25
 800616e:	f53f af71 	bmi.w	8006054 <__ssvfiscanf_r+0x1b8>
 8006172:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800617c:	e7f9      	b.n	8006172 <__ssvfiscanf_r+0x2d6>
 800617e:	bf00      	nop
 8006180:	00000000 	.word	0x00000000

08006184 <_scanf_chars>:
 8006184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006188:	4615      	mov	r5, r2
 800618a:	688a      	ldr	r2, [r1, #8]
 800618c:	4680      	mov	r8, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b932      	cbnz	r2, 80061a0 <_scanf_chars+0x1c>
 8006192:	698a      	ldr	r2, [r1, #24]
 8006194:	2a00      	cmp	r2, #0
 8006196:	bf14      	ite	ne
 8006198:	f04f 32ff 	movne.w	r2, #4294967295
 800619c:	2201      	moveq	r2, #1
 800619e:	608a      	str	r2, [r1, #8]
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006234 <_scanf_chars+0xb0>
 80061a6:	06d1      	lsls	r1, r2, #27
 80061a8:	bf5f      	itttt	pl
 80061aa:	681a      	ldrpl	r2, [r3, #0]
 80061ac:	1d11      	addpl	r1, r2, #4
 80061ae:	6019      	strpl	r1, [r3, #0]
 80061b0:	6816      	ldrpl	r6, [r2, #0]
 80061b2:	2700      	movs	r7, #0
 80061b4:	69a0      	ldr	r0, [r4, #24]
 80061b6:	b188      	cbz	r0, 80061dc <_scanf_chars+0x58>
 80061b8:	2801      	cmp	r0, #1
 80061ba:	d107      	bne.n	80061cc <_scanf_chars+0x48>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	6963      	ldr	r3, [r4, #20]
 80061c2:	5c9b      	ldrb	r3, [r3, r2]
 80061c4:	b953      	cbnz	r3, 80061dc <_scanf_chars+0x58>
 80061c6:	2f00      	cmp	r7, #0
 80061c8:	d031      	beq.n	800622e <_scanf_chars+0xaa>
 80061ca:	e022      	b.n	8006212 <_scanf_chars+0x8e>
 80061cc:	2802      	cmp	r0, #2
 80061ce:	d120      	bne.n	8006212 <_scanf_chars+0x8e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	d41a      	bmi.n	8006212 <_scanf_chars+0x8e>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	06da      	lsls	r2, r3, #27
 80061e0:	bf5e      	ittt	pl
 80061e2:	682b      	ldrpl	r3, [r5, #0]
 80061e4:	781b      	ldrbpl	r3, [r3, #0]
 80061e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80061ea:	682a      	ldr	r2, [r5, #0]
 80061ec:	686b      	ldr	r3, [r5, #4]
 80061ee:	3201      	adds	r2, #1
 80061f0:	602a      	str	r2, [r5, #0]
 80061f2:	68a2      	ldr	r2, [r4, #8]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	3a01      	subs	r2, #1
 80061f8:	606b      	str	r3, [r5, #4]
 80061fa:	3701      	adds	r7, #1
 80061fc:	60a2      	str	r2, [r4, #8]
 80061fe:	b142      	cbz	r2, 8006212 <_scanf_chars+0x8e>
 8006200:	2b00      	cmp	r3, #0
 8006202:	dcd7      	bgt.n	80061b4 <_scanf_chars+0x30>
 8006204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006208:	4629      	mov	r1, r5
 800620a:	4640      	mov	r0, r8
 800620c:	4798      	blx	r3
 800620e:	2800      	cmp	r0, #0
 8006210:	d0d0      	beq.n	80061b4 <_scanf_chars+0x30>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f013 0310 	ands.w	r3, r3, #16
 8006218:	d105      	bne.n	8006226 <_scanf_chars+0xa2>
 800621a:	68e2      	ldr	r2, [r4, #12]
 800621c:	3201      	adds	r2, #1
 800621e:	60e2      	str	r2, [r4, #12]
 8006220:	69a2      	ldr	r2, [r4, #24]
 8006222:	b102      	cbz	r2, 8006226 <_scanf_chars+0xa2>
 8006224:	7033      	strb	r3, [r6, #0]
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	443b      	add	r3, r7
 800622a:	6123      	str	r3, [r4, #16]
 800622c:	2000      	movs	r0, #0
 800622e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006232:	bf00      	nop
 8006234:	08006848 	.word	0x08006848

08006238 <_scanf_i>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4698      	mov	r8, r3
 800623e:	4b74      	ldr	r3, [pc, #464]	@ (8006410 <_scanf_i+0x1d8>)
 8006240:	460c      	mov	r4, r1
 8006242:	4682      	mov	sl, r0
 8006244:	4616      	mov	r6, r2
 8006246:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800624a:	b087      	sub	sp, #28
 800624c:	ab03      	add	r3, sp, #12
 800624e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006252:	4b70      	ldr	r3, [pc, #448]	@ (8006414 <_scanf_i+0x1dc>)
 8006254:	69a1      	ldr	r1, [r4, #24]
 8006256:	4a70      	ldr	r2, [pc, #448]	@ (8006418 <_scanf_i+0x1e0>)
 8006258:	2903      	cmp	r1, #3
 800625a:	bf08      	it	eq
 800625c:	461a      	moveq	r2, r3
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	1e5a      	subs	r2, r3, #1
 8006264:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006268:	bf88      	it	hi
 800626a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800626e:	4627      	mov	r7, r4
 8006270:	bf82      	ittt	hi
 8006272:	eb03 0905 	addhi.w	r9, r3, r5
 8006276:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800627a:	60a3      	strhi	r3, [r4, #8]
 800627c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006280:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006284:	bf98      	it	ls
 8006286:	f04f 0900 	movls.w	r9, #0
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	463d      	mov	r5, r7
 800628e:	f04f 0b00 	mov.w	fp, #0
 8006292:	6831      	ldr	r1, [r6, #0]
 8006294:	ab03      	add	r3, sp, #12
 8006296:	7809      	ldrb	r1, [r1, #0]
 8006298:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800629c:	2202      	movs	r2, #2
 800629e:	f7fd ffa7 	bl	80041f0 <memchr>
 80062a2:	b328      	cbz	r0, 80062f0 <_scanf_i+0xb8>
 80062a4:	f1bb 0f01 	cmp.w	fp, #1
 80062a8:	d159      	bne.n	800635e <_scanf_i+0x126>
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	b92a      	cbnz	r2, 80062ba <_scanf_i+0x82>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	2108      	movs	r1, #8
 80062b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b6:	6061      	str	r1, [r4, #4]
 80062b8:	6022      	str	r2, [r4, #0]
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80062c0:	6022      	str	r2, [r4, #0]
 80062c2:	68a2      	ldr	r2, [r4, #8]
 80062c4:	1e51      	subs	r1, r2, #1
 80062c6:	60a1      	str	r1, [r4, #8]
 80062c8:	b192      	cbz	r2, 80062f0 <_scanf_i+0xb8>
 80062ca:	6832      	ldr	r2, [r6, #0]
 80062cc:	1c51      	adds	r1, r2, #1
 80062ce:	6031      	str	r1, [r6, #0]
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	f805 2b01 	strb.w	r2, [r5], #1
 80062d6:	6872      	ldr	r2, [r6, #4]
 80062d8:	3a01      	subs	r2, #1
 80062da:	2a00      	cmp	r2, #0
 80062dc:	6072      	str	r2, [r6, #4]
 80062de:	dc07      	bgt.n	80062f0 <_scanf_i+0xb8>
 80062e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80062e4:	4631      	mov	r1, r6
 80062e6:	4650      	mov	r0, sl
 80062e8:	4790      	blx	r2
 80062ea:	2800      	cmp	r0, #0
 80062ec:	f040 8085 	bne.w	80063fa <_scanf_i+0x1c2>
 80062f0:	f10b 0b01 	add.w	fp, fp, #1
 80062f4:	f1bb 0f03 	cmp.w	fp, #3
 80062f8:	d1cb      	bne.n	8006292 <_scanf_i+0x5a>
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	b90b      	cbnz	r3, 8006302 <_scanf_i+0xca>
 80062fe:	230a      	movs	r3, #10
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	4945      	ldr	r1, [pc, #276]	@ (800641c <_scanf_i+0x1e4>)
 8006306:	6960      	ldr	r0, [r4, #20]
 8006308:	1ac9      	subs	r1, r1, r3
 800630a:	f000 f889 	bl	8006420 <__sccl>
 800630e:	f04f 0b00 	mov.w	fp, #0
 8006312:	68a3      	ldr	r3, [r4, #8]
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d03d      	beq.n	8006396 <_scanf_i+0x15e>
 800631a:	6831      	ldr	r1, [r6, #0]
 800631c:	6960      	ldr	r0, [r4, #20]
 800631e:	f891 c000 	ldrb.w	ip, [r1]
 8006322:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006326:	2800      	cmp	r0, #0
 8006328:	d035      	beq.n	8006396 <_scanf_i+0x15e>
 800632a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800632e:	d124      	bne.n	800637a <_scanf_i+0x142>
 8006330:	0510      	lsls	r0, r2, #20
 8006332:	d522      	bpl.n	800637a <_scanf_i+0x142>
 8006334:	f10b 0b01 	add.w	fp, fp, #1
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	d003      	beq.n	8006346 <_scanf_i+0x10e>
 800633e:	3301      	adds	r3, #1
 8006340:	f109 39ff 	add.w	r9, r9, #4294967295
 8006344:	60a3      	str	r3, [r4, #8]
 8006346:	6873      	ldr	r3, [r6, #4]
 8006348:	3b01      	subs	r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	6073      	str	r3, [r6, #4]
 800634e:	dd1b      	ble.n	8006388 <_scanf_i+0x150>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	6033      	str	r3, [r6, #0]
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	3b01      	subs	r3, #1
 800635a:	60a3      	str	r3, [r4, #8]
 800635c:	e7d9      	b.n	8006312 <_scanf_i+0xda>
 800635e:	f1bb 0f02 	cmp.w	fp, #2
 8006362:	d1ae      	bne.n	80062c2 <_scanf_i+0x8a>
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800636a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800636e:	d1bf      	bne.n	80062f0 <_scanf_i+0xb8>
 8006370:	2110      	movs	r1, #16
 8006372:	6061      	str	r1, [r4, #4]
 8006374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006378:	e7a2      	b.n	80062c0 <_scanf_i+0x88>
 800637a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	780b      	ldrb	r3, [r1, #0]
 8006382:	f805 3b01 	strb.w	r3, [r5], #1
 8006386:	e7de      	b.n	8006346 <_scanf_i+0x10e>
 8006388:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800638c:	4631      	mov	r1, r6
 800638e:	4650      	mov	r0, sl
 8006390:	4798      	blx	r3
 8006392:	2800      	cmp	r0, #0
 8006394:	d0df      	beq.n	8006356 <_scanf_i+0x11e>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	05d9      	lsls	r1, r3, #23
 800639a:	d50d      	bpl.n	80063b8 <_scanf_i+0x180>
 800639c:	42bd      	cmp	r5, r7
 800639e:	d909      	bls.n	80063b4 <_scanf_i+0x17c>
 80063a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80063a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063a8:	4632      	mov	r2, r6
 80063aa:	4650      	mov	r0, sl
 80063ac:	4798      	blx	r3
 80063ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80063b2:	464d      	mov	r5, r9
 80063b4:	42bd      	cmp	r5, r7
 80063b6:	d028      	beq.n	800640a <_scanf_i+0x1d2>
 80063b8:	6822      	ldr	r2, [r4, #0]
 80063ba:	f012 0210 	ands.w	r2, r2, #16
 80063be:	d113      	bne.n	80063e8 <_scanf_i+0x1b0>
 80063c0:	702a      	strb	r2, [r5, #0]
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	9e01      	ldr	r6, [sp, #4]
 80063c6:	4639      	mov	r1, r7
 80063c8:	4650      	mov	r0, sl
 80063ca:	47b0      	blx	r6
 80063cc:	f8d8 3000 	ldr.w	r3, [r8]
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	f8c8 2000 	str.w	r2, [r8]
 80063d8:	f011 0f20 	tst.w	r1, #32
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	d00f      	beq.n	8006400 <_scanf_i+0x1c8>
 80063e0:	6018      	str	r0, [r3, #0]
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60e3      	str	r3, [r4, #12]
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	1bed      	subs	r5, r5, r7
 80063ec:	445d      	add	r5, fp
 80063ee:	442b      	add	r3, r5
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	2000      	movs	r0, #0
 80063f4:	b007      	add	sp, #28
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	f04f 0b00 	mov.w	fp, #0
 80063fe:	e7ca      	b.n	8006396 <_scanf_i+0x15e>
 8006400:	07ca      	lsls	r2, r1, #31
 8006402:	bf4c      	ite	mi
 8006404:	8018      	strhmi	r0, [r3, #0]
 8006406:	6018      	strpl	r0, [r3, #0]
 8006408:	e7eb      	b.n	80063e2 <_scanf_i+0x1aa>
 800640a:	2001      	movs	r0, #1
 800640c:	e7f2      	b.n	80063f4 <_scanf_i+0x1bc>
 800640e:	bf00      	nop
 8006410:	0800680c 	.word	0x0800680c
 8006414:	08006695 	.word	0x08006695
 8006418:	08006775 	.word	0x08006775
 800641c:	0800683c 	.word	0x0800683c

08006420 <__sccl>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	780b      	ldrb	r3, [r1, #0]
 8006424:	4604      	mov	r4, r0
 8006426:	2b5e      	cmp	r3, #94	@ 0x5e
 8006428:	bf0b      	itete	eq
 800642a:	784b      	ldrbeq	r3, [r1, #1]
 800642c:	1c4a      	addne	r2, r1, #1
 800642e:	1c8a      	addeq	r2, r1, #2
 8006430:	2100      	movne	r1, #0
 8006432:	bf08      	it	eq
 8006434:	2101      	moveq	r1, #1
 8006436:	3801      	subs	r0, #1
 8006438:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800643c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006440:	42a8      	cmp	r0, r5
 8006442:	d1fb      	bne.n	800643c <__sccl+0x1c>
 8006444:	b90b      	cbnz	r3, 800644a <__sccl+0x2a>
 8006446:	1e50      	subs	r0, r2, #1
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	f081 0101 	eor.w	r1, r1, #1
 800644e:	54e1      	strb	r1, [r4, r3]
 8006450:	4610      	mov	r0, r2
 8006452:	4602      	mov	r2, r0
 8006454:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006458:	2d2d      	cmp	r5, #45	@ 0x2d
 800645a:	d005      	beq.n	8006468 <__sccl+0x48>
 800645c:	2d5d      	cmp	r5, #93	@ 0x5d
 800645e:	d016      	beq.n	800648e <__sccl+0x6e>
 8006460:	2d00      	cmp	r5, #0
 8006462:	d0f1      	beq.n	8006448 <__sccl+0x28>
 8006464:	462b      	mov	r3, r5
 8006466:	e7f2      	b.n	800644e <__sccl+0x2e>
 8006468:	7846      	ldrb	r6, [r0, #1]
 800646a:	2e5d      	cmp	r6, #93	@ 0x5d
 800646c:	d0fa      	beq.n	8006464 <__sccl+0x44>
 800646e:	42b3      	cmp	r3, r6
 8006470:	dcf8      	bgt.n	8006464 <__sccl+0x44>
 8006472:	3002      	adds	r0, #2
 8006474:	461a      	mov	r2, r3
 8006476:	3201      	adds	r2, #1
 8006478:	4296      	cmp	r6, r2
 800647a:	54a1      	strb	r1, [r4, r2]
 800647c:	dcfb      	bgt.n	8006476 <__sccl+0x56>
 800647e:	1af2      	subs	r2, r6, r3
 8006480:	3a01      	subs	r2, #1
 8006482:	1c5d      	adds	r5, r3, #1
 8006484:	42b3      	cmp	r3, r6
 8006486:	bfa8      	it	ge
 8006488:	2200      	movge	r2, #0
 800648a:	18ab      	adds	r3, r5, r2
 800648c:	e7e1      	b.n	8006452 <__sccl+0x32>
 800648e:	4610      	mov	r0, r2
 8006490:	e7da      	b.n	8006448 <__sccl+0x28>

08006492 <__submore>:
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800649a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800649e:	4299      	cmp	r1, r3
 80064a0:	d11d      	bne.n	80064de <__submore+0x4c>
 80064a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80064a6:	f7ff fc15 	bl	8005cd4 <_malloc_r>
 80064aa:	b918      	cbnz	r0, 80064b4 <__submore+0x22>
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80064ba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80064be:	6360      	str	r0, [r4, #52]	@ 0x34
 80064c0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80064c4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80064c8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80064cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80064d0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80064d4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80064d8:	6020      	str	r0, [r4, #0]
 80064da:	2000      	movs	r0, #0
 80064dc:	e7e8      	b.n	80064b0 <__submore+0x1e>
 80064de:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80064e0:	0077      	lsls	r7, r6, #1
 80064e2:	463a      	mov	r2, r7
 80064e4:	f000 f82e 	bl	8006544 <_realloc_r>
 80064e8:	4605      	mov	r5, r0
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d0de      	beq.n	80064ac <__submore+0x1a>
 80064ee:	eb00 0806 	add.w	r8, r0, r6
 80064f2:	4601      	mov	r1, r0
 80064f4:	4632      	mov	r2, r6
 80064f6:	4640      	mov	r0, r8
 80064f8:	f000 f816 	bl	8006528 <memcpy>
 80064fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006500:	f8c4 8000 	str.w	r8, [r4]
 8006504:	e7e9      	b.n	80064da <__submore+0x48>
	...

08006508 <_sbrk_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	@ (8006524 <_sbrk_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fe fb70 	bl	8004bf8 <_sbrk>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_sbrk_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_sbrk_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200041bc 	.word	0x200041bc

08006528 <memcpy>:
 8006528:	440a      	add	r2, r1
 800652a:	4291      	cmp	r1, r2
 800652c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006530:	d100      	bne.n	8006534 <memcpy+0xc>
 8006532:	4770      	bx	lr
 8006534:	b510      	push	{r4, lr}
 8006536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800653a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653e:	4291      	cmp	r1, r2
 8006540:	d1f9      	bne.n	8006536 <memcpy+0xe>
 8006542:	bd10      	pop	{r4, pc}

08006544 <_realloc_r>:
 8006544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	4680      	mov	r8, r0
 800654a:	4615      	mov	r5, r2
 800654c:	460c      	mov	r4, r1
 800654e:	b921      	cbnz	r1, 800655a <_realloc_r+0x16>
 8006550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006554:	4611      	mov	r1, r2
 8006556:	f7ff bbbd 	b.w	8005cd4 <_malloc_r>
 800655a:	b92a      	cbnz	r2, 8006568 <_realloc_r+0x24>
 800655c:	f7ff fb4e 	bl	8005bfc <_free_r>
 8006560:	2400      	movs	r4, #0
 8006562:	4620      	mov	r0, r4
 8006564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006568:	f000 f906 	bl	8006778 <_malloc_usable_size_r>
 800656c:	4285      	cmp	r5, r0
 800656e:	4606      	mov	r6, r0
 8006570:	d802      	bhi.n	8006578 <_realloc_r+0x34>
 8006572:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006576:	d8f4      	bhi.n	8006562 <_realloc_r+0x1e>
 8006578:	4629      	mov	r1, r5
 800657a:	4640      	mov	r0, r8
 800657c:	f7ff fbaa 	bl	8005cd4 <_malloc_r>
 8006580:	4607      	mov	r7, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d0ec      	beq.n	8006560 <_realloc_r+0x1c>
 8006586:	42b5      	cmp	r5, r6
 8006588:	462a      	mov	r2, r5
 800658a:	4621      	mov	r1, r4
 800658c:	bf28      	it	cs
 800658e:	4632      	movcs	r2, r6
 8006590:	f7ff ffca 	bl	8006528 <memcpy>
 8006594:	4621      	mov	r1, r4
 8006596:	4640      	mov	r0, r8
 8006598:	f7ff fb30 	bl	8005bfc <_free_r>
 800659c:	463c      	mov	r4, r7
 800659e:	e7e0      	b.n	8006562 <_realloc_r+0x1e>

080065a0 <_strtol_l.constprop.0>:
 80065a0:	2b24      	cmp	r3, #36	@ 0x24
 80065a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a6:	4686      	mov	lr, r0
 80065a8:	4690      	mov	r8, r2
 80065aa:	d801      	bhi.n	80065b0 <_strtol_l.constprop.0+0x10>
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d106      	bne.n	80065be <_strtol_l.constprop.0+0x1e>
 80065b0:	f7ff faf8 	bl	8005ba4 <__errno>
 80065b4:	2316      	movs	r3, #22
 80065b6:	6003      	str	r3, [r0, #0]
 80065b8:	2000      	movs	r0, #0
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	4834      	ldr	r0, [pc, #208]	@ (8006690 <_strtol_l.constprop.0+0xf0>)
 80065c0:	460d      	mov	r5, r1
 80065c2:	462a      	mov	r2, r5
 80065c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065c8:	5d06      	ldrb	r6, [r0, r4]
 80065ca:	f016 0608 	ands.w	r6, r6, #8
 80065ce:	d1f8      	bne.n	80065c2 <_strtol_l.constprop.0+0x22>
 80065d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80065d2:	d12d      	bne.n	8006630 <_strtol_l.constprop.0+0x90>
 80065d4:	782c      	ldrb	r4, [r5, #0]
 80065d6:	2601      	movs	r6, #1
 80065d8:	1c95      	adds	r5, r2, #2
 80065da:	f033 0210 	bics.w	r2, r3, #16
 80065de:	d109      	bne.n	80065f4 <_strtol_l.constprop.0+0x54>
 80065e0:	2c30      	cmp	r4, #48	@ 0x30
 80065e2:	d12a      	bne.n	800663a <_strtol_l.constprop.0+0x9a>
 80065e4:	782a      	ldrb	r2, [r5, #0]
 80065e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065ea:	2a58      	cmp	r2, #88	@ 0x58
 80065ec:	d125      	bne.n	800663a <_strtol_l.constprop.0+0x9a>
 80065ee:	786c      	ldrb	r4, [r5, #1]
 80065f0:	2310      	movs	r3, #16
 80065f2:	3502      	adds	r5, #2
 80065f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80065f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80065fc:	2200      	movs	r2, #0
 80065fe:	fbbc f9f3 	udiv	r9, ip, r3
 8006602:	4610      	mov	r0, r2
 8006604:	fb03 ca19 	mls	sl, r3, r9, ip
 8006608:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800660c:	2f09      	cmp	r7, #9
 800660e:	d81b      	bhi.n	8006648 <_strtol_l.constprop.0+0xa8>
 8006610:	463c      	mov	r4, r7
 8006612:	42a3      	cmp	r3, r4
 8006614:	dd27      	ble.n	8006666 <_strtol_l.constprop.0+0xc6>
 8006616:	1c57      	adds	r7, r2, #1
 8006618:	d007      	beq.n	800662a <_strtol_l.constprop.0+0x8a>
 800661a:	4581      	cmp	r9, r0
 800661c:	d320      	bcc.n	8006660 <_strtol_l.constprop.0+0xc0>
 800661e:	d101      	bne.n	8006624 <_strtol_l.constprop.0+0x84>
 8006620:	45a2      	cmp	sl, r4
 8006622:	db1d      	blt.n	8006660 <_strtol_l.constprop.0+0xc0>
 8006624:	fb00 4003 	mla	r0, r0, r3, r4
 8006628:	2201      	movs	r2, #1
 800662a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800662e:	e7eb      	b.n	8006608 <_strtol_l.constprop.0+0x68>
 8006630:	2c2b      	cmp	r4, #43	@ 0x2b
 8006632:	bf04      	itt	eq
 8006634:	782c      	ldrbeq	r4, [r5, #0]
 8006636:	1c95      	addeq	r5, r2, #2
 8006638:	e7cf      	b.n	80065da <_strtol_l.constprop.0+0x3a>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1da      	bne.n	80065f4 <_strtol_l.constprop.0+0x54>
 800663e:	2c30      	cmp	r4, #48	@ 0x30
 8006640:	bf0c      	ite	eq
 8006642:	2308      	moveq	r3, #8
 8006644:	230a      	movne	r3, #10
 8006646:	e7d5      	b.n	80065f4 <_strtol_l.constprop.0+0x54>
 8006648:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800664c:	2f19      	cmp	r7, #25
 800664e:	d801      	bhi.n	8006654 <_strtol_l.constprop.0+0xb4>
 8006650:	3c37      	subs	r4, #55	@ 0x37
 8006652:	e7de      	b.n	8006612 <_strtol_l.constprop.0+0x72>
 8006654:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006658:	2f19      	cmp	r7, #25
 800665a:	d804      	bhi.n	8006666 <_strtol_l.constprop.0+0xc6>
 800665c:	3c57      	subs	r4, #87	@ 0x57
 800665e:	e7d8      	b.n	8006612 <_strtol_l.constprop.0+0x72>
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	e7e1      	b.n	800662a <_strtol_l.constprop.0+0x8a>
 8006666:	1c53      	adds	r3, r2, #1
 8006668:	d108      	bne.n	800667c <_strtol_l.constprop.0+0xdc>
 800666a:	2322      	movs	r3, #34	@ 0x22
 800666c:	f8ce 3000 	str.w	r3, [lr]
 8006670:	4660      	mov	r0, ip
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	d0a0      	beq.n	80065ba <_strtol_l.constprop.0+0x1a>
 8006678:	1e69      	subs	r1, r5, #1
 800667a:	e006      	b.n	800668a <_strtol_l.constprop.0+0xea>
 800667c:	b106      	cbz	r6, 8006680 <_strtol_l.constprop.0+0xe0>
 800667e:	4240      	negs	r0, r0
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	d099      	beq.n	80065ba <_strtol_l.constprop.0+0x1a>
 8006686:	2a00      	cmp	r2, #0
 8006688:	d1f6      	bne.n	8006678 <_strtol_l.constprop.0+0xd8>
 800668a:	f8c8 1000 	str.w	r1, [r8]
 800668e:	e794      	b.n	80065ba <_strtol_l.constprop.0+0x1a>
 8006690:	08006848 	.word	0x08006848

08006694 <_strtol_r>:
 8006694:	f7ff bf84 	b.w	80065a0 <_strtol_l.constprop.0>

08006698 <_strtoul_l.constprop.0>:
 8006698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800669c:	4e34      	ldr	r6, [pc, #208]	@ (8006770 <_strtoul_l.constprop.0+0xd8>)
 800669e:	4686      	mov	lr, r0
 80066a0:	460d      	mov	r5, r1
 80066a2:	4628      	mov	r0, r5
 80066a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066a8:	5d37      	ldrb	r7, [r6, r4]
 80066aa:	f017 0708 	ands.w	r7, r7, #8
 80066ae:	d1f8      	bne.n	80066a2 <_strtoul_l.constprop.0+0xa>
 80066b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80066b2:	d12f      	bne.n	8006714 <_strtoul_l.constprop.0+0x7c>
 80066b4:	782c      	ldrb	r4, [r5, #0]
 80066b6:	2701      	movs	r7, #1
 80066b8:	1c85      	adds	r5, r0, #2
 80066ba:	f033 0010 	bics.w	r0, r3, #16
 80066be:	d109      	bne.n	80066d4 <_strtoul_l.constprop.0+0x3c>
 80066c0:	2c30      	cmp	r4, #48	@ 0x30
 80066c2:	d12c      	bne.n	800671e <_strtoul_l.constprop.0+0x86>
 80066c4:	7828      	ldrb	r0, [r5, #0]
 80066c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80066ca:	2858      	cmp	r0, #88	@ 0x58
 80066cc:	d127      	bne.n	800671e <_strtoul_l.constprop.0+0x86>
 80066ce:	786c      	ldrb	r4, [r5, #1]
 80066d0:	2310      	movs	r3, #16
 80066d2:	3502      	adds	r5, #2
 80066d4:	f04f 38ff 	mov.w	r8, #4294967295
 80066d8:	2600      	movs	r6, #0
 80066da:	fbb8 f8f3 	udiv	r8, r8, r3
 80066de:	fb03 f908 	mul.w	r9, r3, r8
 80066e2:	ea6f 0909 	mvn.w	r9, r9
 80066e6:	4630      	mov	r0, r6
 80066e8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80066ec:	f1bc 0f09 	cmp.w	ip, #9
 80066f0:	d81c      	bhi.n	800672c <_strtoul_l.constprop.0+0x94>
 80066f2:	4664      	mov	r4, ip
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	dd2a      	ble.n	800674e <_strtoul_l.constprop.0+0xb6>
 80066f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80066fc:	d007      	beq.n	800670e <_strtoul_l.constprop.0+0x76>
 80066fe:	4580      	cmp	r8, r0
 8006700:	d322      	bcc.n	8006748 <_strtoul_l.constprop.0+0xb0>
 8006702:	d101      	bne.n	8006708 <_strtoul_l.constprop.0+0x70>
 8006704:	45a1      	cmp	r9, r4
 8006706:	db1f      	blt.n	8006748 <_strtoul_l.constprop.0+0xb0>
 8006708:	fb00 4003 	mla	r0, r0, r3, r4
 800670c:	2601      	movs	r6, #1
 800670e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006712:	e7e9      	b.n	80066e8 <_strtoul_l.constprop.0+0x50>
 8006714:	2c2b      	cmp	r4, #43	@ 0x2b
 8006716:	bf04      	itt	eq
 8006718:	782c      	ldrbeq	r4, [r5, #0]
 800671a:	1c85      	addeq	r5, r0, #2
 800671c:	e7cd      	b.n	80066ba <_strtoul_l.constprop.0+0x22>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1d8      	bne.n	80066d4 <_strtoul_l.constprop.0+0x3c>
 8006722:	2c30      	cmp	r4, #48	@ 0x30
 8006724:	bf0c      	ite	eq
 8006726:	2308      	moveq	r3, #8
 8006728:	230a      	movne	r3, #10
 800672a:	e7d3      	b.n	80066d4 <_strtoul_l.constprop.0+0x3c>
 800672c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006730:	f1bc 0f19 	cmp.w	ip, #25
 8006734:	d801      	bhi.n	800673a <_strtoul_l.constprop.0+0xa2>
 8006736:	3c37      	subs	r4, #55	@ 0x37
 8006738:	e7dc      	b.n	80066f4 <_strtoul_l.constprop.0+0x5c>
 800673a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800673e:	f1bc 0f19 	cmp.w	ip, #25
 8006742:	d804      	bhi.n	800674e <_strtoul_l.constprop.0+0xb6>
 8006744:	3c57      	subs	r4, #87	@ 0x57
 8006746:	e7d5      	b.n	80066f4 <_strtoul_l.constprop.0+0x5c>
 8006748:	f04f 36ff 	mov.w	r6, #4294967295
 800674c:	e7df      	b.n	800670e <_strtoul_l.constprop.0+0x76>
 800674e:	1c73      	adds	r3, r6, #1
 8006750:	d106      	bne.n	8006760 <_strtoul_l.constprop.0+0xc8>
 8006752:	2322      	movs	r3, #34	@ 0x22
 8006754:	f8ce 3000 	str.w	r3, [lr]
 8006758:	4630      	mov	r0, r6
 800675a:	b932      	cbnz	r2, 800676a <_strtoul_l.constprop.0+0xd2>
 800675c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006760:	b107      	cbz	r7, 8006764 <_strtoul_l.constprop.0+0xcc>
 8006762:	4240      	negs	r0, r0
 8006764:	2a00      	cmp	r2, #0
 8006766:	d0f9      	beq.n	800675c <_strtoul_l.constprop.0+0xc4>
 8006768:	b106      	cbz	r6, 800676c <_strtoul_l.constprop.0+0xd4>
 800676a:	1e69      	subs	r1, r5, #1
 800676c:	6011      	str	r1, [r2, #0]
 800676e:	e7f5      	b.n	800675c <_strtoul_l.constprop.0+0xc4>
 8006770:	08006848 	.word	0x08006848

08006774 <_strtoul_r>:
 8006774:	f7ff bf90 	b.w	8006698 <_strtoul_l.constprop.0>

08006778 <_malloc_usable_size_r>:
 8006778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677c:	1f18      	subs	r0, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfbc      	itt	lt
 8006782:	580b      	ldrlt	r3, [r1, r0]
 8006784:	18c0      	addlt	r0, r0, r3
 8006786:	4770      	bx	lr

08006788 <_init>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr

08006794 <_fini>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr
